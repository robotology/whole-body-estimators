/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <codyco/floatingBaseEstimatorRPC.h>

#include <yarp/os/idl/WireTypes.h>

namespace codyco {

class floatingBaseEstimatorRPC_resetSimpleLeggedOdometry_helper :
        public yarp::os::Portable
{
public:
    explicit floatingBaseEstimatorRPC_resetSimpleLeggedOdometry_helper(const std::string& initial_world_frame, const std::string& initial_fixed_frame);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_initial_world_frame;
    std::string m_initial_fixed_frame;

    thread_local static bool s_return_helper;
};

thread_local bool floatingBaseEstimatorRPC_resetSimpleLeggedOdometry_helper::s_return_helper = {};

floatingBaseEstimatorRPC_resetSimpleLeggedOdometry_helper::floatingBaseEstimatorRPC_resetSimpleLeggedOdometry_helper(const std::string& initial_world_frame, const std::string& initial_fixed_frame) :
        m_initial_world_frame{initial_world_frame},
        m_initial_fixed_frame{initial_fixed_frame}
{
    s_return_helper = {};
}

bool floatingBaseEstimatorRPC_resetSimpleLeggedOdometry_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(3)) {
        return false;
    }
    if (!writer.writeTag("resetSimpleLeggedOdometry", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_initial_world_frame)) {
        return false;
    }
    if (!writer.writeString(m_initial_fixed_frame)) {
        return false;
    }
    return true;
}

bool floatingBaseEstimatorRPC_resetSimpleLeggedOdometry_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class floatingBaseEstimatorRPC_resetSimpleLeggedOdometryToArbitraryFrame_helper :
        public yarp::os::Portable
{
public:
    explicit floatingBaseEstimatorRPC_resetSimpleLeggedOdometryToArbitraryFrame_helper(const std::string& initial_reference_frame, const HomTransform& initial_reference_frame_H_world, const std::string& initial_fixed_frame);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_initial_reference_frame;
    HomTransform m_initial_reference_frame_H_world;
    std::string m_initial_fixed_frame;

    thread_local static bool s_return_helper;
};

thread_local bool floatingBaseEstimatorRPC_resetSimpleLeggedOdometryToArbitraryFrame_helper::s_return_helper = {};

floatingBaseEstimatorRPC_resetSimpleLeggedOdometryToArbitraryFrame_helper::floatingBaseEstimatorRPC_resetSimpleLeggedOdometryToArbitraryFrame_helper(const std::string& initial_reference_frame, const HomTransform& initial_reference_frame_H_world, const std::string& initial_fixed_frame) :
        m_initial_reference_frame{initial_reference_frame},
        m_initial_reference_frame_H_world{initial_reference_frame_H_world},
        m_initial_fixed_frame{initial_fixed_frame}
{
    s_return_helper = {};
}

bool floatingBaseEstimatorRPC_resetSimpleLeggedOdometryToArbitraryFrame_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(15)) {
        return false;
    }
    if (!writer.writeTag("resetSimpleLeggedOdometryToArbitraryFrame", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_initial_reference_frame)) {
        return false;
    }
    if (!writer.write(m_initial_reference_frame_H_world)) {
        return false;
    }
    if (!writer.writeString(m_initial_fixed_frame)) {
        return false;
    }
    return true;
}

bool floatingBaseEstimatorRPC_resetSimpleLeggedOdometryToArbitraryFrame_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class floatingBaseEstimatorRPC_changeFixedLinkSimpleLeggedOdometry_helper :
        public yarp::os::Portable
{
public:
    explicit floatingBaseEstimatorRPC_changeFixedLinkSimpleLeggedOdometry_helper(const std::string& new_fixed_frame);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_new_fixed_frame;

    thread_local static bool s_return_helper;
};

thread_local bool floatingBaseEstimatorRPC_changeFixedLinkSimpleLeggedOdometry_helper::s_return_helper = {};

floatingBaseEstimatorRPC_changeFixedLinkSimpleLeggedOdometry_helper::floatingBaseEstimatorRPC_changeFixedLinkSimpleLeggedOdometry_helper(const std::string& new_fixed_frame) :
        m_new_fixed_frame{new_fixed_frame}
{
    s_return_helper = {};
}

bool floatingBaseEstimatorRPC_changeFixedLinkSimpleLeggedOdometry_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    if (!writer.writeTag("changeFixedLinkSimpleLeggedOdometry", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_new_fixed_frame)) {
        return false;
    }
    return true;
}

bool floatingBaseEstimatorRPC_changeFixedLinkSimpleLeggedOdometry_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class floatingBaseEstimatorRPC_getCurrentSettingsString_helper :
        public yarp::os::Portable
{
public:
    explicit floatingBaseEstimatorRPC_getCurrentSettingsString_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static std::string s_return_helper;
};

thread_local std::string floatingBaseEstimatorRPC_getCurrentSettingsString_helper::s_return_helper = {};

floatingBaseEstimatorRPC_getCurrentSettingsString_helper::floatingBaseEstimatorRPC_getCurrentSettingsString_helper()
{
    s_return_helper = {};
}

bool floatingBaseEstimatorRPC_getCurrentSettingsString_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(1)) {
        return false;
    }
    if (!writer.writeTag("getCurrentSettingsString", 1, 1)) {
        return false;
    }
    return true;
}

bool floatingBaseEstimatorRPC_getCurrentSettingsString_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readString(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

// Constructor
floatingBaseEstimatorRPC::floatingBaseEstimatorRPC()
{
    yarp().setOwner(*this);
}

bool floatingBaseEstimatorRPC::resetSimpleLeggedOdometry(const std::string& initial_world_frame, const std::string& initial_fixed_frame)
{
    floatingBaseEstimatorRPC_resetSimpleLeggedOdometry_helper helper{initial_world_frame, initial_fixed_frame};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool floatingBaseEstimatorRPC::resetSimpleLeggedOdometry(const std::string& initial_world_frame, const std::string& initial_fixed_frame)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? floatingBaseEstimatorRPC_resetSimpleLeggedOdometry_helper::s_return_helper : bool{};
}

bool floatingBaseEstimatorRPC::resetSimpleLeggedOdometryToArbitraryFrame(const std::string& initial_reference_frame, const HomTransform& initial_reference_frame_H_world, const std::string& initial_fixed_frame)
{
    floatingBaseEstimatorRPC_resetSimpleLeggedOdometryToArbitraryFrame_helper helper{initial_reference_frame, initial_reference_frame_H_world, initial_fixed_frame};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool floatingBaseEstimatorRPC::resetSimpleLeggedOdometryToArbitraryFrame(const std::string& initial_reference_frame, const HomTransform& initial_reference_frame_H_world, const std::string& initial_fixed_frame)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? floatingBaseEstimatorRPC_resetSimpleLeggedOdometryToArbitraryFrame_helper::s_return_helper : bool{};
}

bool floatingBaseEstimatorRPC::changeFixedLinkSimpleLeggedOdometry(const std::string& new_fixed_frame)
{
    floatingBaseEstimatorRPC_changeFixedLinkSimpleLeggedOdometry_helper helper{new_fixed_frame};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool floatingBaseEstimatorRPC::changeFixedLinkSimpleLeggedOdometry(const std::string& new_fixed_frame)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? floatingBaseEstimatorRPC_changeFixedLinkSimpleLeggedOdometry_helper::s_return_helper : bool{};
}

std::string floatingBaseEstimatorRPC::getCurrentSettingsString()
{
    floatingBaseEstimatorRPC_getCurrentSettingsString_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "std::string floatingBaseEstimatorRPC::getCurrentSettingsString()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? floatingBaseEstimatorRPC_getCurrentSettingsString_helper::s_return_helper : std::string{};
}

// help method
std::vector<std::string> floatingBaseEstimatorRPC::help(const std::string& functionName)
{
    bool showAll = (functionName == "--all");
    std::vector<std::string> helpString;
    if (showAll) {
        helpString.emplace_back("*** Available commands:");
        helpString.emplace_back("resetSimpleLeggedOdometry");
        helpString.emplace_back("resetSimpleLeggedOdometryToArbitraryFrame");
        helpString.emplace_back("changeFixedLinkSimpleLeggedOdometry");
        helpString.emplace_back("getCurrentSettingsString");
        helpString.emplace_back("help");
    } else {
        if (functionName == "resetSimpleLeggedOdometry") {
            helpString.emplace_back("bool resetSimpleLeggedOdometry(const std::string& initial_world_frame, const std::string& initial_fixed_frame) ");
            helpString.emplace_back("Reset the odometry world to be (initially) a frame specified in the robot model, ");
            helpString.emplace_back("and specify a frame that is assumed to be fixed in the odometry. ");
            helpString.emplace_back("@param initial_world_frame the frame of the robot model that is assume to be initially ");
            helpString.emplace_back("       coincident with the world/inertial frame. ");
            helpString.emplace_back("@param new_fixed_frame the name of a frame attached to the link that should be considered fixed ");
            helpString.emplace_back("@return true/false on success/failure (typically if the frame/link names are wrong) ");
        }
        if (functionName == "resetSimpleLeggedOdometryToArbitraryFrame") {
            helpString.emplace_back("bool resetSimpleLeggedOdometryToArbitraryFrame(const std::string& initial_reference_frame, const HomTransform& initial_reference_frame_H_world, const std::string& initial_fixed_frame) ");
            helpString.emplace_back("Reset the odometry world to be (initially) a frame specified in the robot model, ");
            helpString.emplace_back("and specify a frame that is assumed to be fixed in the odometry. ");
            helpString.emplace_back("@param initial_reference_frame the frame of the robot model with respect to which we expressed the location of the world. ");
            helpString.emplace_back("@param initial_reference_frame_H_world the initial location of the world w.r.t. the initial_reference_frame. ");
            helpString.emplace_back("@param new_fixed_frame the name of a frame attached to the link that should be considered fixed. ");
            helpString.emplace_back("@return true/false on success/failure (typically if the frame/link names are wrong) ");
        }
        if (functionName == "changeFixedLinkSimpleLeggedOdometry") {
            helpString.emplace_back("bool changeFixedLinkSimpleLeggedOdometry(const std::string& new_fixed_frame) ");
            helpString.emplace_back("Change the link that is considered fixed by the odometry. ");
            helpString.emplace_back("@param new_fixed_frame the name of a frame attached to the link that should be considered fixed ");
            helpString.emplace_back("@return true/false on success/failure (typically if the frame names are wrong) ");
        }
        if (functionName == "getCurrentSettingsString") {
            helpString.emplace_back("std::string getCurrentSettingsString() ");
            helpString.emplace_back("Get the current settings in the form of a string. ");
            helpString.emplace_back("@return the current settings as a human readable string. ");
        }
        if (functionName == "help") {
            helpString.emplace_back("std::vector<std::string> help(const std::string& functionName = \"--all\")");
            helpString.emplace_back("Return list of available commands, or help message for a specific function");
            helpString.emplace_back("@param functionName name of command for which to get a detailed description. If none or '--all' is provided, print list of available commands");
            helpString.emplace_back("@return list of strings (one string per line)");
        }
    }
    if (helpString.empty()) {
        helpString.emplace_back("Command not found");
    }
    return helpString;
}

// read from ConnectionReader
bool floatingBaseEstimatorRPC::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    reader.expectAccept();
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }

    std::string tag = reader.readTag();
    bool direct = (tag == "__direct__");
    if (direct) {
        tag = reader.readTag();
    }
    while (!reader.isError()) {
        if (tag == "resetSimpleLeggedOdometry") {
            std::string initial_world_frame;
            std::string initial_fixed_frame;
            if (!reader.readString(initial_world_frame)) {
                reader.fail();
                return false;
            }
            if (!reader.readString(initial_fixed_frame)) {
                reader.fail();
                return false;
            }
            floatingBaseEstimatorRPC_resetSimpleLeggedOdometry_helper::s_return_helper = resetSimpleLeggedOdometry(initial_world_frame, initial_fixed_frame);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(floatingBaseEstimatorRPC_resetSimpleLeggedOdometry_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "resetSimpleLeggedOdometryToArbitraryFrame") {
            std::string initial_reference_frame;
            HomTransform initial_reference_frame_H_world;
            std::string initial_fixed_frame;
            if (!reader.readString(initial_reference_frame)) {
                reader.fail();
                return false;
            }
            if (!reader.read(initial_reference_frame_H_world)) {
                reader.fail();
                return false;
            }
            if (!reader.readString(initial_fixed_frame)) {
                reader.fail();
                return false;
            }
            floatingBaseEstimatorRPC_resetSimpleLeggedOdometryToArbitraryFrame_helper::s_return_helper = resetSimpleLeggedOdometryToArbitraryFrame(initial_reference_frame, initial_reference_frame_H_world, initial_fixed_frame);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(floatingBaseEstimatorRPC_resetSimpleLeggedOdometryToArbitraryFrame_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "changeFixedLinkSimpleLeggedOdometry") {
            std::string new_fixed_frame;
            if (!reader.readString(new_fixed_frame)) {
                reader.fail();
                return false;
            }
            floatingBaseEstimatorRPC_changeFixedLinkSimpleLeggedOdometry_helper::s_return_helper = changeFixedLinkSimpleLeggedOdometry(new_fixed_frame);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(floatingBaseEstimatorRPC_changeFixedLinkSimpleLeggedOdometry_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "getCurrentSettingsString") {
            floatingBaseEstimatorRPC_getCurrentSettingsString_helper::s_return_helper = getCurrentSettingsString();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeString(floatingBaseEstimatorRPC_getCurrentSettingsString_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "help") {
            std::string functionName;
            if (!reader.readString(functionName)) {
                functionName = "--all";
            }
            auto help_strings = help(functionName);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.writeTag("many", 1, 0)) {
                    return false;
                }
                if (!writer.writeListBegin(BOTTLE_TAG_INT32, static_cast<uint32_t>(help_strings.size()))) {
                    return false;
                }
                for (const auto& help_string : help_strings) {
                    if (!writer.writeString(help_string)) {
                        return false;
                    }
                }
                if (!writer.writeListEnd()) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        std::string next_tag = reader.readTag();
        if (next_tag == "") {
            break;
        }
        tag.append("_").append(next_tag);
    }
    return false;
}

} // namespace codyco
