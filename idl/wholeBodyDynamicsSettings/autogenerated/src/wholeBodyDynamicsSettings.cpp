/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <wholeBodyDynamicsSettings.h>

// Default constructor
wholeBodyDynamicsSettings::wholeBodyDynamicsSettings() :
        WirePortable(),
        kinematicSource((KinematicSourceType)0),
        fixedFrameName(""),
        fixedFrameGravity(),
        imuFrameName(""),
        imuFilterCutoffInHz(0),
        forceTorqueFilterCutoffInHz(0),
        jointVelFilterCutoffInHz(0),
        jointAccFilterCutoffInHz(0),
        useJointVelocity(0),
        useJointAcceleration(0),
        startWithZeroFTSensorOffsets(0),
        disableSensorReadCheckAtStartup(0)
{
}

// Constructor with field values
wholeBodyDynamicsSettings::wholeBodyDynamicsSettings(const KinematicSourceType kinematicSource,
                                                     const std::string& fixedFrameName,
                                                     const Gravity& fixedFrameGravity,
                                                     const std::string& imuFrameName,
                                                     const double imuFilterCutoffInHz,
                                                     const double forceTorqueFilterCutoffInHz,
                                                     const double jointVelFilterCutoffInHz,
                                                     const double jointAccFilterCutoffInHz,
                                                     const bool useJointVelocity,
                                                     const bool useJointAcceleration,
                                                     const bool startWithZeroFTSensorOffsets,
                                                     const bool disableSensorReadCheckAtStartup) :
        WirePortable(),
        kinematicSource(kinematicSource),
        fixedFrameName(fixedFrameName),
        fixedFrameGravity(fixedFrameGravity),
        imuFrameName(imuFrameName),
        imuFilterCutoffInHz(imuFilterCutoffInHz),
        forceTorqueFilterCutoffInHz(forceTorqueFilterCutoffInHz),
        jointVelFilterCutoffInHz(jointVelFilterCutoffInHz),
        jointAccFilterCutoffInHz(jointAccFilterCutoffInHz),
        useJointVelocity(useJointVelocity),
        useJointAcceleration(useJointAcceleration),
        startWithZeroFTSensorOffsets(startWithZeroFTSensorOffsets),
        disableSensorReadCheckAtStartup(disableSensorReadCheckAtStartup)
{
}

// Read structure on a Wire
bool wholeBodyDynamicsSettings::read(yarp::os::idl::WireReader& reader)
{
    if (!read_kinematicSource(reader)) {
        return false;
    }
    if (!read_fixedFrameName(reader)) {
        return false;
    }
    if (!read_fixedFrameGravity(reader)) {
        return false;
    }
    if (!read_imuFrameName(reader)) {
        return false;
    }
    if (!read_imuFilterCutoffInHz(reader)) {
        return false;
    }
    if (!read_forceTorqueFilterCutoffInHz(reader)) {
        return false;
    }
    if (!read_jointVelFilterCutoffInHz(reader)) {
        return false;
    }
    if (!read_jointAccFilterCutoffInHz(reader)) {
        return false;
    }
    if (!read_useJointVelocity(reader)) {
        return false;
    }
    if (!read_useJointAcceleration(reader)) {
        return false;
    }
    if (!read_startWithZeroFTSensorOffsets(reader)) {
        return false;
    }
    if (!read_disableSensorReadCheckAtStartup(reader)) {
        return false;
    }
    return !reader.isError();
}

// Read structure on a Connection
bool wholeBodyDynamicsSettings::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader(14)) {
        return false;
    }
    return read(reader);
}

// Write structure on a Wire
bool wholeBodyDynamicsSettings::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!write_kinematicSource(writer)) {
        return false;
    }
    if (!write_fixedFrameName(writer)) {
        return false;
    }
    if (!write_fixedFrameGravity(writer)) {
        return false;
    }
    if (!write_imuFrameName(writer)) {
        return false;
    }
    if (!write_imuFilterCutoffInHz(writer)) {
        return false;
    }
    if (!write_forceTorqueFilterCutoffInHz(writer)) {
        return false;
    }
    if (!write_jointVelFilterCutoffInHz(writer)) {
        return false;
    }
    if (!write_jointAccFilterCutoffInHz(writer)) {
        return false;
    }
    if (!write_useJointVelocity(writer)) {
        return false;
    }
    if (!write_useJointAcceleration(writer)) {
        return false;
    }
    if (!write_startWithZeroFTSensorOffsets(writer)) {
        return false;
    }
    if (!write_disableSensorReadCheckAtStartup(writer)) {
        return false;
    }
    return !writer.isError();
}

// Write structure on a Connection
bool wholeBodyDynamicsSettings::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(14)) {
        return false;
    }
    return write(writer);
}

// Convert to a printable string
std::string wholeBodyDynamicsSettings::toString() const
{
    yarp::os::Bottle b;
    b.read(*this);
    return b.toString();
}

// Editor: default constructor
wholeBodyDynamicsSettings::Editor::Editor()
{
    group = 0;
    obj_owned = true;
    obj = new wholeBodyDynamicsSettings;
    dirty_flags(false);
    yarp().setOwner(*this);
}

// Editor: constructor with base class
wholeBodyDynamicsSettings::Editor::Editor(wholeBodyDynamicsSettings& obj)
{
    group = 0;
    obj_owned = false;
    edit(obj, false);
    yarp().setOwner(*this);
}

// Editor: destructor
wholeBodyDynamicsSettings::Editor::~Editor()
{
    if (obj_owned) {
        delete obj;
    }
}

// Editor: edit
bool wholeBodyDynamicsSettings::Editor::edit(wholeBodyDynamicsSettings& obj, bool dirty)
{
    if (obj_owned) {
        delete this->obj;
    }
    this->obj = &obj;
    obj_owned = false;
    dirty_flags(dirty);
    return true;
}

// Editor: validity check
bool wholeBodyDynamicsSettings::Editor::isValid() const
{
    return obj != nullptr;
}

// Editor: state
wholeBodyDynamicsSettings& wholeBodyDynamicsSettings::Editor::state()
{
    return *obj;
}

// Editor: grouping begin
void wholeBodyDynamicsSettings::Editor::start_editing()
{
    group++;
}

// Editor: grouping end
void wholeBodyDynamicsSettings::Editor::stop_editing()
{
    group--;
    if (group == 0 && is_dirty) {
        communicate();
    }
}
// Editor: kinematicSource setter
void wholeBodyDynamicsSettings::Editor::set_kinematicSource(const KinematicSourceType kinematicSource)
{
    will_set_kinematicSource();
    obj->kinematicSource = kinematicSource;
    mark_dirty_kinematicSource();
    communicate();
    did_set_kinematicSource();
}

// Editor: kinematicSource getter
KinematicSourceType wholeBodyDynamicsSettings::Editor::get_kinematicSource() const
{
    return obj->kinematicSource;
}

// Editor: kinematicSource will_set
bool wholeBodyDynamicsSettings::Editor::will_set_kinematicSource()
{
    return true;
}

// Editor: kinematicSource did_set
bool wholeBodyDynamicsSettings::Editor::did_set_kinematicSource()
{
    return true;
}

// Editor: fixedFrameName setter
void wholeBodyDynamicsSettings::Editor::set_fixedFrameName(const std::string& fixedFrameName)
{
    will_set_fixedFrameName();
    obj->fixedFrameName = fixedFrameName;
    mark_dirty_fixedFrameName();
    communicate();
    did_set_fixedFrameName();
}

// Editor: fixedFrameName getter
const std::string& wholeBodyDynamicsSettings::Editor::get_fixedFrameName() const
{
    return obj->fixedFrameName;
}

// Editor: fixedFrameName will_set
bool wholeBodyDynamicsSettings::Editor::will_set_fixedFrameName()
{
    return true;
}

// Editor: fixedFrameName did_set
bool wholeBodyDynamicsSettings::Editor::did_set_fixedFrameName()
{
    return true;
}

// Editor: fixedFrameGravity setter
void wholeBodyDynamicsSettings::Editor::set_fixedFrameGravity(const Gravity& fixedFrameGravity)
{
    will_set_fixedFrameGravity();
    obj->fixedFrameGravity = fixedFrameGravity;
    mark_dirty_fixedFrameGravity();
    communicate();
    did_set_fixedFrameGravity();
}

// Editor: fixedFrameGravity getter
const Gravity& wholeBodyDynamicsSettings::Editor::get_fixedFrameGravity() const
{
    return obj->fixedFrameGravity;
}

// Editor: fixedFrameGravity will_set
bool wholeBodyDynamicsSettings::Editor::will_set_fixedFrameGravity()
{
    return true;
}

// Editor: fixedFrameGravity did_set
bool wholeBodyDynamicsSettings::Editor::did_set_fixedFrameGravity()
{
    return true;
}

// Editor: imuFrameName setter
void wholeBodyDynamicsSettings::Editor::set_imuFrameName(const std::string& imuFrameName)
{
    will_set_imuFrameName();
    obj->imuFrameName = imuFrameName;
    mark_dirty_imuFrameName();
    communicate();
    did_set_imuFrameName();
}

// Editor: imuFrameName getter
const std::string& wholeBodyDynamicsSettings::Editor::get_imuFrameName() const
{
    return obj->imuFrameName;
}

// Editor: imuFrameName will_set
bool wholeBodyDynamicsSettings::Editor::will_set_imuFrameName()
{
    return true;
}

// Editor: imuFrameName did_set
bool wholeBodyDynamicsSettings::Editor::did_set_imuFrameName()
{
    return true;
}

// Editor: imuFilterCutoffInHz setter
void wholeBodyDynamicsSettings::Editor::set_imuFilterCutoffInHz(const double imuFilterCutoffInHz)
{
    will_set_imuFilterCutoffInHz();
    obj->imuFilterCutoffInHz = imuFilterCutoffInHz;
    mark_dirty_imuFilterCutoffInHz();
    communicate();
    did_set_imuFilterCutoffInHz();
}

// Editor: imuFilterCutoffInHz getter
double wholeBodyDynamicsSettings::Editor::get_imuFilterCutoffInHz() const
{
    return obj->imuFilterCutoffInHz;
}

// Editor: imuFilterCutoffInHz will_set
bool wholeBodyDynamicsSettings::Editor::will_set_imuFilterCutoffInHz()
{
    return true;
}

// Editor: imuFilterCutoffInHz did_set
bool wholeBodyDynamicsSettings::Editor::did_set_imuFilterCutoffInHz()
{
    return true;
}

// Editor: forceTorqueFilterCutoffInHz setter
void wholeBodyDynamicsSettings::Editor::set_forceTorqueFilterCutoffInHz(const double forceTorqueFilterCutoffInHz)
{
    will_set_forceTorqueFilterCutoffInHz();
    obj->forceTorqueFilterCutoffInHz = forceTorqueFilterCutoffInHz;
    mark_dirty_forceTorqueFilterCutoffInHz();
    communicate();
    did_set_forceTorqueFilterCutoffInHz();
}

// Editor: forceTorqueFilterCutoffInHz getter
double wholeBodyDynamicsSettings::Editor::get_forceTorqueFilterCutoffInHz() const
{
    return obj->forceTorqueFilterCutoffInHz;
}

// Editor: forceTorqueFilterCutoffInHz will_set
bool wholeBodyDynamicsSettings::Editor::will_set_forceTorqueFilterCutoffInHz()
{
    return true;
}

// Editor: forceTorqueFilterCutoffInHz did_set
bool wholeBodyDynamicsSettings::Editor::did_set_forceTorqueFilterCutoffInHz()
{
    return true;
}

// Editor: jointVelFilterCutoffInHz setter
void wholeBodyDynamicsSettings::Editor::set_jointVelFilterCutoffInHz(const double jointVelFilterCutoffInHz)
{
    will_set_jointVelFilterCutoffInHz();
    obj->jointVelFilterCutoffInHz = jointVelFilterCutoffInHz;
    mark_dirty_jointVelFilterCutoffInHz();
    communicate();
    did_set_jointVelFilterCutoffInHz();
}

// Editor: jointVelFilterCutoffInHz getter
double wholeBodyDynamicsSettings::Editor::get_jointVelFilterCutoffInHz() const
{
    return obj->jointVelFilterCutoffInHz;
}

// Editor: jointVelFilterCutoffInHz will_set
bool wholeBodyDynamicsSettings::Editor::will_set_jointVelFilterCutoffInHz()
{
    return true;
}

// Editor: jointVelFilterCutoffInHz did_set
bool wholeBodyDynamicsSettings::Editor::did_set_jointVelFilterCutoffInHz()
{
    return true;
}

// Editor: jointAccFilterCutoffInHz setter
void wholeBodyDynamicsSettings::Editor::set_jointAccFilterCutoffInHz(const double jointAccFilterCutoffInHz)
{
    will_set_jointAccFilterCutoffInHz();
    obj->jointAccFilterCutoffInHz = jointAccFilterCutoffInHz;
    mark_dirty_jointAccFilterCutoffInHz();
    communicate();
    did_set_jointAccFilterCutoffInHz();
}

// Editor: jointAccFilterCutoffInHz getter
double wholeBodyDynamicsSettings::Editor::get_jointAccFilterCutoffInHz() const
{
    return obj->jointAccFilterCutoffInHz;
}

// Editor: jointAccFilterCutoffInHz will_set
bool wholeBodyDynamicsSettings::Editor::will_set_jointAccFilterCutoffInHz()
{
    return true;
}

// Editor: jointAccFilterCutoffInHz did_set
bool wholeBodyDynamicsSettings::Editor::did_set_jointAccFilterCutoffInHz()
{
    return true;
}

// Editor: useJointVelocity setter
void wholeBodyDynamicsSettings::Editor::set_useJointVelocity(const bool useJointVelocity)
{
    will_set_useJointVelocity();
    obj->useJointVelocity = useJointVelocity;
    mark_dirty_useJointVelocity();
    communicate();
    did_set_useJointVelocity();
}

// Editor: useJointVelocity getter
bool wholeBodyDynamicsSettings::Editor::get_useJointVelocity() const
{
    return obj->useJointVelocity;
}

// Editor: useJointVelocity will_set
bool wholeBodyDynamicsSettings::Editor::will_set_useJointVelocity()
{
    return true;
}

// Editor: useJointVelocity did_set
bool wholeBodyDynamicsSettings::Editor::did_set_useJointVelocity()
{
    return true;
}

// Editor: useJointAcceleration setter
void wholeBodyDynamicsSettings::Editor::set_useJointAcceleration(const bool useJointAcceleration)
{
    will_set_useJointAcceleration();
    obj->useJointAcceleration = useJointAcceleration;
    mark_dirty_useJointAcceleration();
    communicate();
    did_set_useJointAcceleration();
}

// Editor: useJointAcceleration getter
bool wholeBodyDynamicsSettings::Editor::get_useJointAcceleration() const
{
    return obj->useJointAcceleration;
}

// Editor: useJointAcceleration will_set
bool wholeBodyDynamicsSettings::Editor::will_set_useJointAcceleration()
{
    return true;
}

// Editor: useJointAcceleration did_set
bool wholeBodyDynamicsSettings::Editor::did_set_useJointAcceleration()
{
    return true;
}

// Editor: startWithZeroFTSensorOffsets setter
void wholeBodyDynamicsSettings::Editor::set_startWithZeroFTSensorOffsets(const bool startWithZeroFTSensorOffsets)
{
    will_set_startWithZeroFTSensorOffsets();
    obj->startWithZeroFTSensorOffsets = startWithZeroFTSensorOffsets;
    mark_dirty_startWithZeroFTSensorOffsets();
    communicate();
    did_set_startWithZeroFTSensorOffsets();
}

// Editor: startWithZeroFTSensorOffsets getter
bool wholeBodyDynamicsSettings::Editor::get_startWithZeroFTSensorOffsets() const
{
    return obj->startWithZeroFTSensorOffsets;
}

// Editor: startWithZeroFTSensorOffsets will_set
bool wholeBodyDynamicsSettings::Editor::will_set_startWithZeroFTSensorOffsets()
{
    return true;
}

// Editor: startWithZeroFTSensorOffsets did_set
bool wholeBodyDynamicsSettings::Editor::did_set_startWithZeroFTSensorOffsets()
{
    return true;
}

// Editor: disableSensorReadCheckAtStartup setter
void wholeBodyDynamicsSettings::Editor::set_disableSensorReadCheckAtStartup(const bool disableSensorReadCheckAtStartup)
{
    will_set_disableSensorReadCheckAtStartup();
    obj->disableSensorReadCheckAtStartup = disableSensorReadCheckAtStartup;
    mark_dirty_disableSensorReadCheckAtStartup();
    communicate();
    did_set_disableSensorReadCheckAtStartup();
}

// Editor: disableSensorReadCheckAtStartup getter
bool wholeBodyDynamicsSettings::Editor::get_disableSensorReadCheckAtStartup() const
{
    return obj->disableSensorReadCheckAtStartup;
}

// Editor: disableSensorReadCheckAtStartup will_set
bool wholeBodyDynamicsSettings::Editor::will_set_disableSensorReadCheckAtStartup()
{
    return true;
}

// Editor: disableSensorReadCheckAtStartup did_set
bool wholeBodyDynamicsSettings::Editor::did_set_disableSensorReadCheckAtStartup()
{
    return true;
}

// Editor: clean
void wholeBodyDynamicsSettings::Editor::clean()
{
    dirty_flags(false);
}

// Editor: read
bool wholeBodyDynamicsSettings::Editor::read(yarp::os::ConnectionReader& connection)
{
    if (!isValid()) {
        return false;
    }
    yarp::os::idl::WireReader reader(connection);
    reader.expectAccept();
    if (!reader.readListHeader()) {
        return false;
    }
    int len = reader.getLength();
    if (len == 0) {
        yarp::os::idl::WireWriter writer(reader);
        if (writer.isNull()) {
            return true;
        }
        if (!writer.writeListHeader(1)) {
            return false;
        }
        writer.writeString("send: 'help' or 'patch (param1 val1) (param2 val2)'");
        return true;
    }
    std::string tag;
    if (!reader.readString(tag)) {
        return false;
    }
    if (tag == "help") {
        yarp::os::idl::WireWriter writer(reader);
        if (writer.isNull()) {
            return true;
        }
        if (!writer.writeListHeader(2)) {
            return false;
        }
        if (!writer.writeTag("many", 1, 0)) {
            return false;
        }
        if (reader.getLength() > 0) {
            std::string field;
            if (!reader.readString(field)) {
                return false;
            }
            if (field == "kinematicSource") {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeString("KinematicSourceType kinematicSource")) {
                    return false;
                }
            }
            if (field == "fixedFrameName") {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.writeString("std::string fixedFrameName")) {
                    return false;
                }
                if (!writer.writeString("Specify the source of the kinematic information for one link, see KinematicSourceType information for more info.")) {
                    return false;
                }
            }
            if (field == "fixedFrameGravity") {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.writeString("Gravity fixedFrameGravity")) {
                    return false;
                }
                if (!writer.writeString("If kinematicSource is FIXED_LINK, specify the frame of the robot that we know to be fixed (i.e. not moving with respect to an inertial frame)")) {
                    return false;
                }
            }
            if (field == "imuFrameName") {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.writeString("std::string imuFrameName")) {
                    return false;
                }
                if (!writer.writeString("If kinematicSource is FIXED_LINK, specify the gravity vector (in m/s^2) in the fixedFrame")) {
                    return false;
                }
            }
            if (field == "imuFilterCutoffInHz") {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.writeString("double imuFilterCutoffInHz")) {
                    return false;
                }
                if (!writer.writeString("If kinematicSource is IMU, specify the frame name of the imu")) {
                    return false;
                }
            }
            if (field == "forceTorqueFilterCutoffInHz") {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.writeString("double forceTorqueFilterCutoffInHz")) {
                    return false;
                }
                if (!writer.writeString("Cutoff frequency (in Hz) of the first order filter of the IMU")) {
                    return false;
                }
            }
            if (field == "jointVelFilterCutoffInHz") {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.writeString("double jointVelFilterCutoffInHz")) {
                    return false;
                }
                if (!writer.writeString("Cutoff frequency(in Hz) of the first order filter of the F/T sensors")) {
                    return false;
                }
            }
            if (field == "jointAccFilterCutoffInHz") {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.writeString("double jointAccFilterCutoffInHz")) {
                    return false;
                }
                if (!writer.writeString("Cutoff frequency(in Hz) of the first order filter of the joint velocities")) {
                    return false;
                }
            }
            if (field == "useJointVelocity") {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.writeString("bool useJointVelocity")) {
                    return false;
                }
                if (!writer.writeString("Cutoff frequency(in Hz) of the first order filter of the joint accelerations")) {
                    return false;
                }
            }
            if (field == "useJointAcceleration") {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.writeString("bool useJointAcceleration")) {
                    return false;
                }
                if (!writer.writeString("Use the joint velocity measurement if this is true, assume they are zero otherwise.")) {
                    return false;
                }
            }
            if (field == "startWithZeroFTSensorOffsets") {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.writeString("bool startWithZeroFTSensorOffsets")) {
                    return false;
                }
                if (!writer.writeString("Use the joint acceleration measurment if this is true, assume they are zero otherwise.")) {
                    return false;
                }
            }
            if (field == "disableSensorReadCheckAtStartup") {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.writeString("bool disableSensorReadCheckAtStartup")) {
                    return false;
                }
                if (!writer.writeString("If this flag is set to true, the read from the sensors is skipped at startup")) {
                    return false;
                }
            }
        }
        if (!writer.writeListHeader(13)) {
            return false;
        }
        writer.writeString("*** Available fields:");
        writer.writeString("kinematicSource");
        writer.writeString("fixedFrameName");
        writer.writeString("fixedFrameGravity");
        writer.writeString("imuFrameName");
        writer.writeString("imuFilterCutoffInHz");
        writer.writeString("forceTorqueFilterCutoffInHz");
        writer.writeString("jointVelFilterCutoffInHz");
        writer.writeString("jointAccFilterCutoffInHz");
        writer.writeString("useJointVelocity");
        writer.writeString("useJointAcceleration");
        writer.writeString("startWithZeroFTSensorOffsets");
        writer.writeString("disableSensorReadCheckAtStartup");
        return true;
    }
    bool nested = true;
    bool have_act = false;
    if (tag != "patch") {
        if (((len - 1) % 2) != 0) {
            return false;
        }
        len = 1 + ((len - 1) / 2);
        nested = false;
        have_act = true;
    }
    for (int i = 1; i < len; ++i) {
        if (nested && !reader.readListHeader(3)) {
            return false;
        }
        std::string act;
        std::string key;
        if (have_act) {
            act = tag;
        } else if (!reader.readString(act)) {
            return false;
        }
        if (!reader.readString(key)) {
            return false;
        }
        if (key == "kinematicSource") {
            will_set_kinematicSource();
            if (!obj->nested_read_kinematicSource(reader)) {
                return false;
            }
            did_set_kinematicSource();
        } else if (key == "fixedFrameName") {
            will_set_fixedFrameName();
            if (!obj->nested_read_fixedFrameName(reader)) {
                return false;
            }
            did_set_fixedFrameName();
        } else if (key == "fixedFrameGravity") {
            will_set_fixedFrameGravity();
            if (!obj->nested_read_fixedFrameGravity(reader)) {
                return false;
            }
            did_set_fixedFrameGravity();
        } else if (key == "imuFrameName") {
            will_set_imuFrameName();
            if (!obj->nested_read_imuFrameName(reader)) {
                return false;
            }
            did_set_imuFrameName();
        } else if (key == "imuFilterCutoffInHz") {
            will_set_imuFilterCutoffInHz();
            if (!obj->nested_read_imuFilterCutoffInHz(reader)) {
                return false;
            }
            did_set_imuFilterCutoffInHz();
        } else if (key == "forceTorqueFilterCutoffInHz") {
            will_set_forceTorqueFilterCutoffInHz();
            if (!obj->nested_read_forceTorqueFilterCutoffInHz(reader)) {
                return false;
            }
            did_set_forceTorqueFilterCutoffInHz();
        } else if (key == "jointVelFilterCutoffInHz") {
            will_set_jointVelFilterCutoffInHz();
            if (!obj->nested_read_jointVelFilterCutoffInHz(reader)) {
                return false;
            }
            did_set_jointVelFilterCutoffInHz();
        } else if (key == "jointAccFilterCutoffInHz") {
            will_set_jointAccFilterCutoffInHz();
            if (!obj->nested_read_jointAccFilterCutoffInHz(reader)) {
                return false;
            }
            did_set_jointAccFilterCutoffInHz();
        } else if (key == "useJointVelocity") {
            will_set_useJointVelocity();
            if (!obj->nested_read_useJointVelocity(reader)) {
                return false;
            }
            did_set_useJointVelocity();
        } else if (key == "useJointAcceleration") {
            will_set_useJointAcceleration();
            if (!obj->nested_read_useJointAcceleration(reader)) {
                return false;
            }
            did_set_useJointAcceleration();
        } else if (key == "startWithZeroFTSensorOffsets") {
            will_set_startWithZeroFTSensorOffsets();
            if (!obj->nested_read_startWithZeroFTSensorOffsets(reader)) {
                return false;
            }
            did_set_startWithZeroFTSensorOffsets();
        } else if (key == "disableSensorReadCheckAtStartup") {
            will_set_disableSensorReadCheckAtStartup();
            if (!obj->nested_read_disableSensorReadCheckAtStartup(reader)) {
                return false;
            }
            did_set_disableSensorReadCheckAtStartup();
        } else {
            // would be useful to have a fallback here
        }
    }
    reader.accept();
    yarp::os::idl::WireWriter writer(reader);
    if (writer.isNull()) {
        return true;
    }
    writer.writeListHeader(1);
    writer.writeVocab32('o', 'k');
    return true;
}

// Editor: write
bool wholeBodyDynamicsSettings::Editor::write(yarp::os::ConnectionWriter& connection) const
{
    if (!isValid()) {
        return false;
    }
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(dirty_count + 1)) {
        return false;
    }
    if (!writer.writeString("patch")) {
        return false;
    }
    if (is_dirty_kinematicSource) {
        if (!writer.writeListHeader(3)) {
            return false;
        }
        if (!writer.writeString("set")) {
            return false;
        }
        if (!writer.writeString("kinematicSource")) {
            return false;
        }
        if (!obj->nested_write_kinematicSource(writer)) {
            return false;
        }
    }
    if (is_dirty_fixedFrameName) {
        if (!writer.writeListHeader(3)) {
            return false;
        }
        if (!writer.writeString("set")) {
            return false;
        }
        if (!writer.writeString("fixedFrameName")) {
            return false;
        }
        if (!obj->nested_write_fixedFrameName(writer)) {
            return false;
        }
    }
    if (is_dirty_fixedFrameGravity) {
        if (!writer.writeListHeader(3)) {
            return false;
        }
        if (!writer.writeString("set")) {
            return false;
        }
        if (!writer.writeString("fixedFrameGravity")) {
            return false;
        }
        if (!obj->nested_write_fixedFrameGravity(writer)) {
            return false;
        }
    }
    if (is_dirty_imuFrameName) {
        if (!writer.writeListHeader(3)) {
            return false;
        }
        if (!writer.writeString("set")) {
            return false;
        }
        if (!writer.writeString("imuFrameName")) {
            return false;
        }
        if (!obj->nested_write_imuFrameName(writer)) {
            return false;
        }
    }
    if (is_dirty_imuFilterCutoffInHz) {
        if (!writer.writeListHeader(3)) {
            return false;
        }
        if (!writer.writeString("set")) {
            return false;
        }
        if (!writer.writeString("imuFilterCutoffInHz")) {
            return false;
        }
        if (!obj->nested_write_imuFilterCutoffInHz(writer)) {
            return false;
        }
    }
    if (is_dirty_forceTorqueFilterCutoffInHz) {
        if (!writer.writeListHeader(3)) {
            return false;
        }
        if (!writer.writeString("set")) {
            return false;
        }
        if (!writer.writeString("forceTorqueFilterCutoffInHz")) {
            return false;
        }
        if (!obj->nested_write_forceTorqueFilterCutoffInHz(writer)) {
            return false;
        }
    }
    if (is_dirty_jointVelFilterCutoffInHz) {
        if (!writer.writeListHeader(3)) {
            return false;
        }
        if (!writer.writeString("set")) {
            return false;
        }
        if (!writer.writeString("jointVelFilterCutoffInHz")) {
            return false;
        }
        if (!obj->nested_write_jointVelFilterCutoffInHz(writer)) {
            return false;
        }
    }
    if (is_dirty_jointAccFilterCutoffInHz) {
        if (!writer.writeListHeader(3)) {
            return false;
        }
        if (!writer.writeString("set")) {
            return false;
        }
        if (!writer.writeString("jointAccFilterCutoffInHz")) {
            return false;
        }
        if (!obj->nested_write_jointAccFilterCutoffInHz(writer)) {
            return false;
        }
    }
    if (is_dirty_useJointVelocity) {
        if (!writer.writeListHeader(3)) {
            return false;
        }
        if (!writer.writeString("set")) {
            return false;
        }
        if (!writer.writeString("useJointVelocity")) {
            return false;
        }
        if (!obj->nested_write_useJointVelocity(writer)) {
            return false;
        }
    }
    if (is_dirty_useJointAcceleration) {
        if (!writer.writeListHeader(3)) {
            return false;
        }
        if (!writer.writeString("set")) {
            return false;
        }
        if (!writer.writeString("useJointAcceleration")) {
            return false;
        }
        if (!obj->nested_write_useJointAcceleration(writer)) {
            return false;
        }
    }
    if (is_dirty_startWithZeroFTSensorOffsets) {
        if (!writer.writeListHeader(3)) {
            return false;
        }
        if (!writer.writeString("set")) {
            return false;
        }
        if (!writer.writeString("startWithZeroFTSensorOffsets")) {
            return false;
        }
        if (!obj->nested_write_startWithZeroFTSensorOffsets(writer)) {
            return false;
        }
    }
    if (is_dirty_disableSensorReadCheckAtStartup) {
        if (!writer.writeListHeader(3)) {
            return false;
        }
        if (!writer.writeString("set")) {
            return false;
        }
        if (!writer.writeString("disableSensorReadCheckAtStartup")) {
            return false;
        }
        if (!obj->nested_write_disableSensorReadCheckAtStartup(writer)) {
            return false;
        }
    }
    return !writer.isError();
}

// Editor: send if possible
void wholeBodyDynamicsSettings::Editor::communicate()
{
    if (group != 0) {
        return;
    }
    if (yarp().canWrite()) {
        yarp().write(*this);
        clean();
    }
}

// Editor: mark dirty overall
void wholeBodyDynamicsSettings::Editor::mark_dirty()
{
    is_dirty = true;
}

// Editor: kinematicSource mark_dirty
void wholeBodyDynamicsSettings::Editor::mark_dirty_kinematicSource()
{
    if (is_dirty_kinematicSource) {
        return;
    }
    dirty_count++;
    is_dirty_kinematicSource = true;
    mark_dirty();
}

// Editor: fixedFrameName mark_dirty
void wholeBodyDynamicsSettings::Editor::mark_dirty_fixedFrameName()
{
    if (is_dirty_fixedFrameName) {
        return;
    }
    dirty_count++;
    is_dirty_fixedFrameName = true;
    mark_dirty();
}

// Editor: fixedFrameGravity mark_dirty
void wholeBodyDynamicsSettings::Editor::mark_dirty_fixedFrameGravity()
{
    if (is_dirty_fixedFrameGravity) {
        return;
    }
    dirty_count++;
    is_dirty_fixedFrameGravity = true;
    mark_dirty();
}

// Editor: imuFrameName mark_dirty
void wholeBodyDynamicsSettings::Editor::mark_dirty_imuFrameName()
{
    if (is_dirty_imuFrameName) {
        return;
    }
    dirty_count++;
    is_dirty_imuFrameName = true;
    mark_dirty();
}

// Editor: imuFilterCutoffInHz mark_dirty
void wholeBodyDynamicsSettings::Editor::mark_dirty_imuFilterCutoffInHz()
{
    if (is_dirty_imuFilterCutoffInHz) {
        return;
    }
    dirty_count++;
    is_dirty_imuFilterCutoffInHz = true;
    mark_dirty();
}

// Editor: forceTorqueFilterCutoffInHz mark_dirty
void wholeBodyDynamicsSettings::Editor::mark_dirty_forceTorqueFilterCutoffInHz()
{
    if (is_dirty_forceTorqueFilterCutoffInHz) {
        return;
    }
    dirty_count++;
    is_dirty_forceTorqueFilterCutoffInHz = true;
    mark_dirty();
}

// Editor: jointVelFilterCutoffInHz mark_dirty
void wholeBodyDynamicsSettings::Editor::mark_dirty_jointVelFilterCutoffInHz()
{
    if (is_dirty_jointVelFilterCutoffInHz) {
        return;
    }
    dirty_count++;
    is_dirty_jointVelFilterCutoffInHz = true;
    mark_dirty();
}

// Editor: jointAccFilterCutoffInHz mark_dirty
void wholeBodyDynamicsSettings::Editor::mark_dirty_jointAccFilterCutoffInHz()
{
    if (is_dirty_jointAccFilterCutoffInHz) {
        return;
    }
    dirty_count++;
    is_dirty_jointAccFilterCutoffInHz = true;
    mark_dirty();
}

// Editor: useJointVelocity mark_dirty
void wholeBodyDynamicsSettings::Editor::mark_dirty_useJointVelocity()
{
    if (is_dirty_useJointVelocity) {
        return;
    }
    dirty_count++;
    is_dirty_useJointVelocity = true;
    mark_dirty();
}

// Editor: useJointAcceleration mark_dirty
void wholeBodyDynamicsSettings::Editor::mark_dirty_useJointAcceleration()
{
    if (is_dirty_useJointAcceleration) {
        return;
    }
    dirty_count++;
    is_dirty_useJointAcceleration = true;
    mark_dirty();
}

// Editor: startWithZeroFTSensorOffsets mark_dirty
void wholeBodyDynamicsSettings::Editor::mark_dirty_startWithZeroFTSensorOffsets()
{
    if (is_dirty_startWithZeroFTSensorOffsets) {
        return;
    }
    dirty_count++;
    is_dirty_startWithZeroFTSensorOffsets = true;
    mark_dirty();
}

// Editor: disableSensorReadCheckAtStartup mark_dirty
void wholeBodyDynamicsSettings::Editor::mark_dirty_disableSensorReadCheckAtStartup()
{
    if (is_dirty_disableSensorReadCheckAtStartup) {
        return;
    }
    dirty_count++;
    is_dirty_disableSensorReadCheckAtStartup = true;
    mark_dirty();
}

// Editor: dirty_flags
void wholeBodyDynamicsSettings::Editor::dirty_flags(bool flag)
{
    is_dirty = flag;
    is_dirty_kinematicSource = flag;
    is_dirty_fixedFrameName = flag;
    is_dirty_fixedFrameGravity = flag;
    is_dirty_imuFrameName = flag;
    is_dirty_imuFilterCutoffInHz = flag;
    is_dirty_forceTorqueFilterCutoffInHz = flag;
    is_dirty_jointVelFilterCutoffInHz = flag;
    is_dirty_jointAccFilterCutoffInHz = flag;
    is_dirty_useJointVelocity = flag;
    is_dirty_useJointAcceleration = flag;
    is_dirty_startWithZeroFTSensorOffsets = flag;
    is_dirty_disableSensorReadCheckAtStartup = flag;
    dirty_count = flag ? 12 : 0;
}

// read kinematicSource field
bool wholeBodyDynamicsSettings::read_kinematicSource(yarp::os::idl::WireReader& reader)
{
    int32_t ecast0;
    KinematicSourceTypeVocab cvrt1;
    if (!reader.readEnum(ecast0, cvrt1)) {
        reader.fail();
        return false;
    } else {
        kinematicSource = static_cast<KinematicSourceType>(ecast0);
    }
    return true;
}

// write kinematicSource field
bool wholeBodyDynamicsSettings::write_kinematicSource(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI32(static_cast<int32_t>(kinematicSource))) {
        return false;
    }
    return true;
}

// read (nested) kinematicSource field
bool wholeBodyDynamicsSettings::nested_read_kinematicSource(yarp::os::idl::WireReader& reader)
{
    int32_t ecast2;
    KinematicSourceTypeVocab cvrt3;
    if (!reader.readEnum(ecast2, cvrt3)) {
        reader.fail();
        return false;
    } else {
        kinematicSource = static_cast<KinematicSourceType>(ecast2);
    }
    return true;
}

// write (nested) kinematicSource field
bool wholeBodyDynamicsSettings::nested_write_kinematicSource(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI32(static_cast<int32_t>(kinematicSource))) {
        return false;
    }
    return true;
}

// read fixedFrameName field
bool wholeBodyDynamicsSettings::read_fixedFrameName(yarp::os::idl::WireReader& reader)
{
    if (!reader.readString(fixedFrameName)) {
        reader.fail();
        return false;
    }
    return true;
}

// write fixedFrameName field
bool wholeBodyDynamicsSettings::write_fixedFrameName(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(fixedFrameName)) {
        return false;
    }
    return true;
}

// read (nested) fixedFrameName field
bool wholeBodyDynamicsSettings::nested_read_fixedFrameName(yarp::os::idl::WireReader& reader)
{
    if (!reader.readString(fixedFrameName)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) fixedFrameName field
bool wholeBodyDynamicsSettings::nested_write_fixedFrameName(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(fixedFrameName)) {
        return false;
    }
    return true;
}

// read fixedFrameGravity field
bool wholeBodyDynamicsSettings::read_fixedFrameGravity(yarp::os::idl::WireReader& reader)
{
    if (!reader.read(fixedFrameGravity)) {
        reader.fail();
        return false;
    }
    return true;
}

// write fixedFrameGravity field
bool wholeBodyDynamicsSettings::write_fixedFrameGravity(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.write(fixedFrameGravity)) {
        return false;
    }
    return true;
}

// read (nested) fixedFrameGravity field
bool wholeBodyDynamicsSettings::nested_read_fixedFrameGravity(yarp::os::idl::WireReader& reader)
{
    if (!reader.readNested(fixedFrameGravity)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) fixedFrameGravity field
bool wholeBodyDynamicsSettings::nested_write_fixedFrameGravity(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeNested(fixedFrameGravity)) {
        return false;
    }
    return true;
}

// read imuFrameName field
bool wholeBodyDynamicsSettings::read_imuFrameName(yarp::os::idl::WireReader& reader)
{
    if (!reader.readString(imuFrameName)) {
        reader.fail();
        return false;
    }
    return true;
}

// write imuFrameName field
bool wholeBodyDynamicsSettings::write_imuFrameName(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(imuFrameName)) {
        return false;
    }
    return true;
}

// read (nested) imuFrameName field
bool wholeBodyDynamicsSettings::nested_read_imuFrameName(yarp::os::idl::WireReader& reader)
{
    if (!reader.readString(imuFrameName)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) imuFrameName field
bool wholeBodyDynamicsSettings::nested_write_imuFrameName(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(imuFrameName)) {
        return false;
    }
    return true;
}

// read imuFilterCutoffInHz field
bool wholeBodyDynamicsSettings::read_imuFilterCutoffInHz(yarp::os::idl::WireReader& reader)
{
    if (!reader.readFloat64(imuFilterCutoffInHz)) {
        reader.fail();
        return false;
    }
    return true;
}

// write imuFilterCutoffInHz field
bool wholeBodyDynamicsSettings::write_imuFilterCutoffInHz(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(imuFilterCutoffInHz)) {
        return false;
    }
    return true;
}

// read (nested) imuFilterCutoffInHz field
bool wholeBodyDynamicsSettings::nested_read_imuFilterCutoffInHz(yarp::os::idl::WireReader& reader)
{
    if (!reader.readFloat64(imuFilterCutoffInHz)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) imuFilterCutoffInHz field
bool wholeBodyDynamicsSettings::nested_write_imuFilterCutoffInHz(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(imuFilterCutoffInHz)) {
        return false;
    }
    return true;
}

// read forceTorqueFilterCutoffInHz field
bool wholeBodyDynamicsSettings::read_forceTorqueFilterCutoffInHz(yarp::os::idl::WireReader& reader)
{
    if (!reader.readFloat64(forceTorqueFilterCutoffInHz)) {
        reader.fail();
        return false;
    }
    return true;
}

// write forceTorqueFilterCutoffInHz field
bool wholeBodyDynamicsSettings::write_forceTorqueFilterCutoffInHz(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(forceTorqueFilterCutoffInHz)) {
        return false;
    }
    return true;
}

// read (nested) forceTorqueFilterCutoffInHz field
bool wholeBodyDynamicsSettings::nested_read_forceTorqueFilterCutoffInHz(yarp::os::idl::WireReader& reader)
{
    if (!reader.readFloat64(forceTorqueFilterCutoffInHz)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) forceTorqueFilterCutoffInHz field
bool wholeBodyDynamicsSettings::nested_write_forceTorqueFilterCutoffInHz(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(forceTorqueFilterCutoffInHz)) {
        return false;
    }
    return true;
}

// read jointVelFilterCutoffInHz field
bool wholeBodyDynamicsSettings::read_jointVelFilterCutoffInHz(yarp::os::idl::WireReader& reader)
{
    if (!reader.readFloat64(jointVelFilterCutoffInHz)) {
        reader.fail();
        return false;
    }
    return true;
}

// write jointVelFilterCutoffInHz field
bool wholeBodyDynamicsSettings::write_jointVelFilterCutoffInHz(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(jointVelFilterCutoffInHz)) {
        return false;
    }
    return true;
}

// read (nested) jointVelFilterCutoffInHz field
bool wholeBodyDynamicsSettings::nested_read_jointVelFilterCutoffInHz(yarp::os::idl::WireReader& reader)
{
    if (!reader.readFloat64(jointVelFilterCutoffInHz)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) jointVelFilterCutoffInHz field
bool wholeBodyDynamicsSettings::nested_write_jointVelFilterCutoffInHz(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(jointVelFilterCutoffInHz)) {
        return false;
    }
    return true;
}

// read jointAccFilterCutoffInHz field
bool wholeBodyDynamicsSettings::read_jointAccFilterCutoffInHz(yarp::os::idl::WireReader& reader)
{
    if (!reader.readFloat64(jointAccFilterCutoffInHz)) {
        reader.fail();
        return false;
    }
    return true;
}

// write jointAccFilterCutoffInHz field
bool wholeBodyDynamicsSettings::write_jointAccFilterCutoffInHz(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(jointAccFilterCutoffInHz)) {
        return false;
    }
    return true;
}

// read (nested) jointAccFilterCutoffInHz field
bool wholeBodyDynamicsSettings::nested_read_jointAccFilterCutoffInHz(yarp::os::idl::WireReader& reader)
{
    if (!reader.readFloat64(jointAccFilterCutoffInHz)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) jointAccFilterCutoffInHz field
bool wholeBodyDynamicsSettings::nested_write_jointAccFilterCutoffInHz(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(jointAccFilterCutoffInHz)) {
        return false;
    }
    return true;
}

// read useJointVelocity field
bool wholeBodyDynamicsSettings::read_useJointVelocity(yarp::os::idl::WireReader& reader)
{
    if (!reader.readBool(useJointVelocity)) {
        reader.fail();
        return false;
    }
    return true;
}

// write useJointVelocity field
bool wholeBodyDynamicsSettings::write_useJointVelocity(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeBool(useJointVelocity)) {
        return false;
    }
    return true;
}

// read (nested) useJointVelocity field
bool wholeBodyDynamicsSettings::nested_read_useJointVelocity(yarp::os::idl::WireReader& reader)
{
    if (!reader.readBool(useJointVelocity)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) useJointVelocity field
bool wholeBodyDynamicsSettings::nested_write_useJointVelocity(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeBool(useJointVelocity)) {
        return false;
    }
    return true;
}

// read useJointAcceleration field
bool wholeBodyDynamicsSettings::read_useJointAcceleration(yarp::os::idl::WireReader& reader)
{
    if (!reader.readBool(useJointAcceleration)) {
        reader.fail();
        return false;
    }
    return true;
}

// write useJointAcceleration field
bool wholeBodyDynamicsSettings::write_useJointAcceleration(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeBool(useJointAcceleration)) {
        return false;
    }
    return true;
}

// read (nested) useJointAcceleration field
bool wholeBodyDynamicsSettings::nested_read_useJointAcceleration(yarp::os::idl::WireReader& reader)
{
    if (!reader.readBool(useJointAcceleration)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) useJointAcceleration field
bool wholeBodyDynamicsSettings::nested_write_useJointAcceleration(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeBool(useJointAcceleration)) {
        return false;
    }
    return true;
}

// read startWithZeroFTSensorOffsets field
bool wholeBodyDynamicsSettings::read_startWithZeroFTSensorOffsets(yarp::os::idl::WireReader& reader)
{
    if (!reader.readBool(startWithZeroFTSensorOffsets)) {
        reader.fail();
        return false;
    }
    return true;
}

// write startWithZeroFTSensorOffsets field
bool wholeBodyDynamicsSettings::write_startWithZeroFTSensorOffsets(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeBool(startWithZeroFTSensorOffsets)) {
        return false;
    }
    return true;
}

// read (nested) startWithZeroFTSensorOffsets field
bool wholeBodyDynamicsSettings::nested_read_startWithZeroFTSensorOffsets(yarp::os::idl::WireReader& reader)
{
    if (!reader.readBool(startWithZeroFTSensorOffsets)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) startWithZeroFTSensorOffsets field
bool wholeBodyDynamicsSettings::nested_write_startWithZeroFTSensorOffsets(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeBool(startWithZeroFTSensorOffsets)) {
        return false;
    }
    return true;
}

// read disableSensorReadCheckAtStartup field
bool wholeBodyDynamicsSettings::read_disableSensorReadCheckAtStartup(yarp::os::idl::WireReader& reader)
{
    if (!reader.readBool(disableSensorReadCheckAtStartup)) {
        reader.fail();
        return false;
    }
    return true;
}

// write disableSensorReadCheckAtStartup field
bool wholeBodyDynamicsSettings::write_disableSensorReadCheckAtStartup(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeBool(disableSensorReadCheckAtStartup)) {
        return false;
    }
    return true;
}

// read (nested) disableSensorReadCheckAtStartup field
bool wholeBodyDynamicsSettings::nested_read_disableSensorReadCheckAtStartup(yarp::os::idl::WireReader& reader)
{
    if (!reader.readBool(disableSensorReadCheckAtStartup)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) disableSensorReadCheckAtStartup field
bool wholeBodyDynamicsSettings::nested_write_disableSensorReadCheckAtStartup(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeBool(disableSensorReadCheckAtStartup)) {
        return false;
    }
    return true;
}
