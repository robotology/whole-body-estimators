/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#ifndef YARP_THRIFT_GENERATOR_STRUCT_WHOLEBODYDYNAMICSSETTINGS_H
#define YARP_THRIFT_GENERATOR_STRUCT_WHOLEBODYDYNAMICSSETTINGS_H

#include <yarp/os/Wire.h>
#include <yarp/os/idl/WireTypes.h>
#include <Gravity.h>
#include <KinematicSourceType.h>

class wholeBodyDynamicsSettings :
        public yarp::os::idl::WirePortable
{
public:
    // Fields
    KinematicSourceType kinematicSource;
    /**
     * Specify the source of the kinematic information for one link, see KinematicSourceType information for more info.
     */
    std::string fixedFrameName;
    /**
     * If kinematicSource is FIXED_LINK, specify the frame of the robot that we know to be fixed (i.e. not moving with respect to an inertial frame)
     */
    Gravity fixedFrameGravity;
    /**
     * If kinematicSource is FIXED_LINK, specify the gravity vector (in m/s^2) in the fixedFrame
     */
    std::string imuFrameName;
    /**
     * If kinematicSource is IMU, specify the frame name of the imu
     */
    double imuFilterCutoffInHz;
    /**
     * Cutoff frequency (in Hz) of the first order filter of the IMU
     */
    double forceTorqueFilterCutoffInHz;
    /**
     * Cutoff frequency(in Hz) of the first order filter of the F/T sensors
     */
    double jointVelFilterCutoffInHz;
    /**
     * Cutoff frequency(in Hz) of the first order filter of the joint velocities
     */
    double jointAccFilterCutoffInHz;
    /**
     * Cutoff frequency(in Hz) of the first order filter of the joint accelerations
     */
    bool useJointVelocity;
    /**
     * Use the joint velocity measurement if this is true, assume they are zero otherwise.
     */
    bool useJointAcceleration;
    /**
     * Use the joint acceleration measurment if this is true, assume they are zero otherwise.
     */
    bool startWithZeroFTSensorOffsets;
    /**
     * If this flag is set to true, the read from the sensors is skipped at startup
     */
    bool disableSensorReadCheckAtStartup;

    // Default constructor
    wholeBodyDynamicsSettings();

    // Constructor with field values
    wholeBodyDynamicsSettings(const KinematicSourceType kinematicSource,
                              const std::string& fixedFrameName,
                              const Gravity& fixedFrameGravity,
                              const std::string& imuFrameName,
                              const double imuFilterCutoffInHz,
                              const double forceTorqueFilterCutoffInHz,
                              const double jointVelFilterCutoffInHz,
                              const double jointAccFilterCutoffInHz,
                              const bool useJointVelocity,
                              const bool useJointAcceleration,
                              const bool startWithZeroFTSensorOffsets,
                              const bool disableSensorReadCheckAtStartup);

    // Read structure on a Wire
    bool read(yarp::os::idl::WireReader& reader) override;

    // Read structure on a Connection
    bool read(yarp::os::ConnectionReader& connection) override;

    // Write structure on a Wire
    bool write(const yarp::os::idl::WireWriter& writer) const override;

    // Write structure on a Connection
    bool write(yarp::os::ConnectionWriter& connection) const override;

    // Convert to a printable string
    std::string toString() const;

    // If you want to serialize this class without nesting, use this helper
    typedef yarp::os::idl::Unwrapped<wholeBodyDynamicsSettings> unwrapped;

    class Editor :
            public yarp::os::Wire,
            public yarp::os::PortWriter
    {
    public:
        // Editor: default constructor
        Editor();

        // Editor: constructor with base class
        Editor(wholeBodyDynamicsSettings& obj);

        // Editor: destructor
        ~Editor() override;

        // Editor: Deleted constructors and operator=
        Editor(const Editor& rhs) = delete;
        Editor(Editor&& rhs) = delete;
        Editor& operator=(const Editor& rhs) = delete;
        Editor& operator=(Editor&& rhs) = delete;

        // Editor: edit
        bool edit(wholeBodyDynamicsSettings& obj, bool dirty = true);

        // Editor: validity check
        bool isValid() const;

        // Editor: state
        wholeBodyDynamicsSettings& state();

        // Editor: start editing
        void start_editing();

#ifndef YARP_NO_DEPRECATED // Since YARP 3.2
        YARP_DEPRECATED_MSG("Use start_editing() instead")
        void begin()
        {
            start_editing();
        }
#endif // YARP_NO_DEPRECATED

        // Editor: stop editing
        void stop_editing();

#ifndef YARP_NO_DEPRECATED // Since YARP 3.2
        YARP_DEPRECATED_MSG("Use stop_editing() instead")
        void end()
        {
            stop_editing();
        }
#endif // YARP_NO_DEPRECATED

        // Editor: kinematicSource field
        void set_kinematicSource(const KinematicSourceType kinematicSource);
        KinematicSourceType get_kinematicSource() const;
        virtual bool will_set_kinematicSource();
        virtual bool did_set_kinematicSource();

        // Editor: fixedFrameName field
        void set_fixedFrameName(const std::string& fixedFrameName);
        const std::string& get_fixedFrameName() const;
        virtual bool will_set_fixedFrameName();
        virtual bool did_set_fixedFrameName();

        // Editor: fixedFrameGravity field
        void set_fixedFrameGravity(const Gravity& fixedFrameGravity);
        const Gravity& get_fixedFrameGravity() const;
        virtual bool will_set_fixedFrameGravity();
        virtual bool did_set_fixedFrameGravity();

        // Editor: imuFrameName field
        void set_imuFrameName(const std::string& imuFrameName);
        const std::string& get_imuFrameName() const;
        virtual bool will_set_imuFrameName();
        virtual bool did_set_imuFrameName();

        // Editor: imuFilterCutoffInHz field
        void set_imuFilterCutoffInHz(const double imuFilterCutoffInHz);
        double get_imuFilterCutoffInHz() const;
        virtual bool will_set_imuFilterCutoffInHz();
        virtual bool did_set_imuFilterCutoffInHz();

        // Editor: forceTorqueFilterCutoffInHz field
        void set_forceTorqueFilterCutoffInHz(const double forceTorqueFilterCutoffInHz);
        double get_forceTorqueFilterCutoffInHz() const;
        virtual bool will_set_forceTorqueFilterCutoffInHz();
        virtual bool did_set_forceTorqueFilterCutoffInHz();

        // Editor: jointVelFilterCutoffInHz field
        void set_jointVelFilterCutoffInHz(const double jointVelFilterCutoffInHz);
        double get_jointVelFilterCutoffInHz() const;
        virtual bool will_set_jointVelFilterCutoffInHz();
        virtual bool did_set_jointVelFilterCutoffInHz();

        // Editor: jointAccFilterCutoffInHz field
        void set_jointAccFilterCutoffInHz(const double jointAccFilterCutoffInHz);
        double get_jointAccFilterCutoffInHz() const;
        virtual bool will_set_jointAccFilterCutoffInHz();
        virtual bool did_set_jointAccFilterCutoffInHz();

        // Editor: useJointVelocity field
        void set_useJointVelocity(const bool useJointVelocity);
        bool get_useJointVelocity() const;
        virtual bool will_set_useJointVelocity();
        virtual bool did_set_useJointVelocity();

        // Editor: useJointAcceleration field
        void set_useJointAcceleration(const bool useJointAcceleration);
        bool get_useJointAcceleration() const;
        virtual bool will_set_useJointAcceleration();
        virtual bool did_set_useJointAcceleration();

        // Editor: startWithZeroFTSensorOffsets field
        void set_startWithZeroFTSensorOffsets(const bool startWithZeroFTSensorOffsets);
        bool get_startWithZeroFTSensorOffsets() const;
        virtual bool will_set_startWithZeroFTSensorOffsets();
        virtual bool did_set_startWithZeroFTSensorOffsets();

        // Editor: disableSensorReadCheckAtStartup field
        void set_disableSensorReadCheckAtStartup(const bool disableSensorReadCheckAtStartup);
        bool get_disableSensorReadCheckAtStartup() const;
        virtual bool will_set_disableSensorReadCheckAtStartup();
        virtual bool did_set_disableSensorReadCheckAtStartup();

        // Editor: clean
        void clean();

        // Editor: read
        bool read(yarp::os::ConnectionReader& connection) override;

        // Editor: write
        bool write(yarp::os::ConnectionWriter& connection) const override;

    private:
        // Editor: state
        wholeBodyDynamicsSettings* obj;
        bool obj_owned;
        int group;

        // Editor: dirty variables
        bool is_dirty;
        bool is_dirty_kinematicSource;
        bool is_dirty_fixedFrameName;
        bool is_dirty_fixedFrameGravity;
        bool is_dirty_imuFrameName;
        bool is_dirty_imuFilterCutoffInHz;
        bool is_dirty_forceTorqueFilterCutoffInHz;
        bool is_dirty_jointVelFilterCutoffInHz;
        bool is_dirty_jointAccFilterCutoffInHz;
        bool is_dirty_useJointVelocity;
        bool is_dirty_useJointAcceleration;
        bool is_dirty_startWithZeroFTSensorOffsets;
        bool is_dirty_disableSensorReadCheckAtStartup;
        int dirty_count;

        // Editor: send if possible
        void communicate();

        // Editor: mark dirty overall
        void mark_dirty();

        // Editor: mark dirty single fields
        void mark_dirty_kinematicSource();
        void mark_dirty_fixedFrameName();
        void mark_dirty_fixedFrameGravity();
        void mark_dirty_imuFrameName();
        void mark_dirty_imuFilterCutoffInHz();
        void mark_dirty_forceTorqueFilterCutoffInHz();
        void mark_dirty_jointVelFilterCutoffInHz();
        void mark_dirty_jointAccFilterCutoffInHz();
        void mark_dirty_useJointVelocity();
        void mark_dirty_useJointAcceleration();
        void mark_dirty_startWithZeroFTSensorOffsets();
        void mark_dirty_disableSensorReadCheckAtStartup();

        // Editor: dirty_flags
        void dirty_flags(bool flag);
    };

private:
    // read/write kinematicSource field
    bool read_kinematicSource(yarp::os::idl::WireReader& reader);
    bool write_kinematicSource(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_kinematicSource(yarp::os::idl::WireReader& reader);
    bool nested_write_kinematicSource(const yarp::os::idl::WireWriter& writer) const;

    // read/write fixedFrameName field
    bool read_fixedFrameName(yarp::os::idl::WireReader& reader);
    bool write_fixedFrameName(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_fixedFrameName(yarp::os::idl::WireReader& reader);
    bool nested_write_fixedFrameName(const yarp::os::idl::WireWriter& writer) const;

    // read/write fixedFrameGravity field
    bool read_fixedFrameGravity(yarp::os::idl::WireReader& reader);
    bool write_fixedFrameGravity(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_fixedFrameGravity(yarp::os::idl::WireReader& reader);
    bool nested_write_fixedFrameGravity(const yarp::os::idl::WireWriter& writer) const;

    // read/write imuFrameName field
    bool read_imuFrameName(yarp::os::idl::WireReader& reader);
    bool write_imuFrameName(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_imuFrameName(yarp::os::idl::WireReader& reader);
    bool nested_write_imuFrameName(const yarp::os::idl::WireWriter& writer) const;

    // read/write imuFilterCutoffInHz field
    bool read_imuFilterCutoffInHz(yarp::os::idl::WireReader& reader);
    bool write_imuFilterCutoffInHz(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_imuFilterCutoffInHz(yarp::os::idl::WireReader& reader);
    bool nested_write_imuFilterCutoffInHz(const yarp::os::idl::WireWriter& writer) const;

    // read/write forceTorqueFilterCutoffInHz field
    bool read_forceTorqueFilterCutoffInHz(yarp::os::idl::WireReader& reader);
    bool write_forceTorqueFilterCutoffInHz(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_forceTorqueFilterCutoffInHz(yarp::os::idl::WireReader& reader);
    bool nested_write_forceTorqueFilterCutoffInHz(const yarp::os::idl::WireWriter& writer) const;

    // read/write jointVelFilterCutoffInHz field
    bool read_jointVelFilterCutoffInHz(yarp::os::idl::WireReader& reader);
    bool write_jointVelFilterCutoffInHz(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_jointVelFilterCutoffInHz(yarp::os::idl::WireReader& reader);
    bool nested_write_jointVelFilterCutoffInHz(const yarp::os::idl::WireWriter& writer) const;

    // read/write jointAccFilterCutoffInHz field
    bool read_jointAccFilterCutoffInHz(yarp::os::idl::WireReader& reader);
    bool write_jointAccFilterCutoffInHz(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_jointAccFilterCutoffInHz(yarp::os::idl::WireReader& reader);
    bool nested_write_jointAccFilterCutoffInHz(const yarp::os::idl::WireWriter& writer) const;

    // read/write useJointVelocity field
    bool read_useJointVelocity(yarp::os::idl::WireReader& reader);
    bool write_useJointVelocity(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_useJointVelocity(yarp::os::idl::WireReader& reader);
    bool nested_write_useJointVelocity(const yarp::os::idl::WireWriter& writer) const;

    // read/write useJointAcceleration field
    bool read_useJointAcceleration(yarp::os::idl::WireReader& reader);
    bool write_useJointAcceleration(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_useJointAcceleration(yarp::os::idl::WireReader& reader);
    bool nested_write_useJointAcceleration(const yarp::os::idl::WireWriter& writer) const;

    // read/write startWithZeroFTSensorOffsets field
    bool read_startWithZeroFTSensorOffsets(yarp::os::idl::WireReader& reader);
    bool write_startWithZeroFTSensorOffsets(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_startWithZeroFTSensorOffsets(yarp::os::idl::WireReader& reader);
    bool nested_write_startWithZeroFTSensorOffsets(const yarp::os::idl::WireWriter& writer) const;

    // read/write disableSensorReadCheckAtStartup field
    bool read_disableSensorReadCheckAtStartup(yarp::os::idl::WireReader& reader);
    bool write_disableSensorReadCheckAtStartup(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_disableSensorReadCheckAtStartup(yarp::os::idl::WireReader& reader);
    bool nested_write_disableSensorReadCheckAtStartup(const yarp::os::idl::WireWriter& writer) const;
};

#endif // YARP_THRIFT_GENERATOR_STRUCT_WHOLEBODYDYNAMICSSETTINGS_H
