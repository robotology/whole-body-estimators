/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <wholeBodyDynamics_IDLServer.h>

#include <yarp/os/idl/WireTypes.h>

class wholeBodyDynamics_IDLServer_calib_helper :
        public yarp::os::Portable
{
public:
    explicit wholeBodyDynamics_IDLServer_calib_helper(const std::string& calib_code, const std::int32_t nr_of_samples);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_calib_code;
    std::int32_t m_nr_of_samples;

    thread_local static bool s_return_helper;
};

thread_local bool wholeBodyDynamics_IDLServer_calib_helper::s_return_helper = {};

wholeBodyDynamics_IDLServer_calib_helper::wholeBodyDynamics_IDLServer_calib_helper(const std::string& calib_code, const std::int32_t nr_of_samples) :
        m_calib_code{calib_code},
        m_nr_of_samples{nr_of_samples}
{
    s_return_helper = {};
}

bool wholeBodyDynamics_IDLServer_calib_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(3)) {
        return false;
    }
    if (!writer.writeTag("calib", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_calib_code)) {
        return false;
    }
    if (!writer.writeI32(m_nr_of_samples)) {
        return false;
    }
    return true;
}

bool wholeBodyDynamics_IDLServer_calib_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class wholeBodyDynamics_IDLServer_calibStanding_helper :
        public yarp::os::Portable
{
public:
    explicit wholeBodyDynamics_IDLServer_calibStanding_helper(const std::string& calib_code, const std::int32_t nr_of_samples);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_calib_code;
    std::int32_t m_nr_of_samples;

    thread_local static bool s_return_helper;
};

thread_local bool wholeBodyDynamics_IDLServer_calibStanding_helper::s_return_helper = {};

wholeBodyDynamics_IDLServer_calibStanding_helper::wholeBodyDynamics_IDLServer_calibStanding_helper(const std::string& calib_code, const std::int32_t nr_of_samples) :
        m_calib_code{calib_code},
        m_nr_of_samples{nr_of_samples}
{
    s_return_helper = {};
}

bool wholeBodyDynamics_IDLServer_calibStanding_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(3)) {
        return false;
    }
    if (!writer.writeTag("calibStanding", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_calib_code)) {
        return false;
    }
    if (!writer.writeI32(m_nr_of_samples)) {
        return false;
    }
    return true;
}

bool wholeBodyDynamics_IDLServer_calibStanding_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class wholeBodyDynamics_IDLServer_calibStandingWithJetsiRonCubMk1_helper :
        public yarp::os::Portable
{
public:
    explicit wholeBodyDynamics_IDLServer_calibStandingWithJetsiRonCubMk1_helper(const std::string& calib_code, const std::int32_t nr_of_samples);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_calib_code;
    std::int32_t m_nr_of_samples;

    thread_local static bool s_return_helper;
};

thread_local bool wholeBodyDynamics_IDLServer_calibStandingWithJetsiRonCubMk1_helper::s_return_helper = {};

wholeBodyDynamics_IDLServer_calibStandingWithJetsiRonCubMk1_helper::wholeBodyDynamics_IDLServer_calibStandingWithJetsiRonCubMk1_helper(const std::string& calib_code, const std::int32_t nr_of_samples) :
        m_calib_code{calib_code},
        m_nr_of_samples{nr_of_samples}
{
    s_return_helper = {};
}

bool wholeBodyDynamics_IDLServer_calibStandingWithJetsiRonCubMk1_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(3)) {
        return false;
    }
    if (!writer.writeTag("calibStandingWithJetsiRonCubMk1", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_calib_code)) {
        return false;
    }
    if (!writer.writeI32(m_nr_of_samples)) {
        return false;
    }
    return true;
}

bool wholeBodyDynamics_IDLServer_calibStandingWithJetsiRonCubMk1_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class wholeBodyDynamics_IDLServer_calibStandingLeftFoot_helper :
        public yarp::os::Portable
{
public:
    explicit wholeBodyDynamics_IDLServer_calibStandingLeftFoot_helper(const std::string& calib_code, const std::int32_t nr_of_samples);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_calib_code;
    std::int32_t m_nr_of_samples;

    thread_local static bool s_return_helper;
};

thread_local bool wholeBodyDynamics_IDLServer_calibStandingLeftFoot_helper::s_return_helper = {};

wholeBodyDynamics_IDLServer_calibStandingLeftFoot_helper::wholeBodyDynamics_IDLServer_calibStandingLeftFoot_helper(const std::string& calib_code, const std::int32_t nr_of_samples) :
        m_calib_code{calib_code},
        m_nr_of_samples{nr_of_samples}
{
    s_return_helper = {};
}

bool wholeBodyDynamics_IDLServer_calibStandingLeftFoot_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(3)) {
        return false;
    }
    if (!writer.writeTag("calibStandingLeftFoot", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_calib_code)) {
        return false;
    }
    if (!writer.writeI32(m_nr_of_samples)) {
        return false;
    }
    return true;
}

bool wholeBodyDynamics_IDLServer_calibStandingLeftFoot_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class wholeBodyDynamics_IDLServer_calibStandingRightFoot_helper :
        public yarp::os::Portable
{
public:
    explicit wholeBodyDynamics_IDLServer_calibStandingRightFoot_helper(const std::string& calib_code, const std::int32_t nr_of_samples);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_calib_code;
    std::int32_t m_nr_of_samples;

    thread_local static bool s_return_helper;
};

thread_local bool wholeBodyDynamics_IDLServer_calibStandingRightFoot_helper::s_return_helper = {};

wholeBodyDynamics_IDLServer_calibStandingRightFoot_helper::wholeBodyDynamics_IDLServer_calibStandingRightFoot_helper(const std::string& calib_code, const std::int32_t nr_of_samples) :
        m_calib_code{calib_code},
        m_nr_of_samples{nr_of_samples}
{
    s_return_helper = {};
}

bool wholeBodyDynamics_IDLServer_calibStandingRightFoot_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(3)) {
        return false;
    }
    if (!writer.writeTag("calibStandingRightFoot", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_calib_code)) {
        return false;
    }
    if (!writer.writeI32(m_nr_of_samples)) {
        return false;
    }
    return true;
}

bool wholeBodyDynamics_IDLServer_calibStandingRightFoot_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class wholeBodyDynamics_IDLServer_calibStandingOnOneLink_helper :
        public yarp::os::Portable
{
public:
    explicit wholeBodyDynamics_IDLServer_calibStandingOnOneLink_helper(const std::string& standing_frame, const std::int32_t nr_of_samples);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_standing_frame;
    std::int32_t m_nr_of_samples;

    thread_local static bool s_return_helper;
};

thread_local bool wholeBodyDynamics_IDLServer_calibStandingOnOneLink_helper::s_return_helper = {};

wholeBodyDynamics_IDLServer_calibStandingOnOneLink_helper::wholeBodyDynamics_IDLServer_calibStandingOnOneLink_helper(const std::string& standing_frame, const std::int32_t nr_of_samples) :
        m_standing_frame{standing_frame},
        m_nr_of_samples{nr_of_samples}
{
    s_return_helper = {};
}

bool wholeBodyDynamics_IDLServer_calibStandingOnOneLink_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(3)) {
        return false;
    }
    if (!writer.writeTag("calibStandingOnOneLink", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_standing_frame)) {
        return false;
    }
    if (!writer.writeI32(m_nr_of_samples)) {
        return false;
    }
    return true;
}

bool wholeBodyDynamics_IDLServer_calibStandingOnOneLink_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class wholeBodyDynamics_IDLServer_calibStandingOnTwoLinks_helper :
        public yarp::os::Portable
{
public:
    explicit wholeBodyDynamics_IDLServer_calibStandingOnTwoLinks_helper(const std::string& first_standing_frame, const std::string& second_standing_frame, const std::int32_t nr_of_samples);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_first_standing_frame;
    std::string m_second_standing_frame;
    std::int32_t m_nr_of_samples;

    thread_local static bool s_return_helper;
};

thread_local bool wholeBodyDynamics_IDLServer_calibStandingOnTwoLinks_helper::s_return_helper = {};

wholeBodyDynamics_IDLServer_calibStandingOnTwoLinks_helper::wholeBodyDynamics_IDLServer_calibStandingOnTwoLinks_helper(const std::string& first_standing_frame, const std::string& second_standing_frame, const std::int32_t nr_of_samples) :
        m_first_standing_frame{first_standing_frame},
        m_second_standing_frame{second_standing_frame},
        m_nr_of_samples{nr_of_samples}
{
    s_return_helper = {};
}

bool wholeBodyDynamics_IDLServer_calibStandingOnTwoLinks_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(4)) {
        return false;
    }
    if (!writer.writeTag("calibStandingOnTwoLinks", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_first_standing_frame)) {
        return false;
    }
    if (!writer.writeString(m_second_standing_frame)) {
        return false;
    }
    if (!writer.writeI32(m_nr_of_samples)) {
        return false;
    }
    return true;
}

bool wholeBodyDynamics_IDLServer_calibStandingOnTwoLinks_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class wholeBodyDynamics_IDLServer_resetOffset_helper :
        public yarp::os::Portable
{
public:
    explicit wholeBodyDynamics_IDLServer_resetOffset_helper(const std::string& calib_code);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_calib_code;

    thread_local static bool s_return_helper;
};

thread_local bool wholeBodyDynamics_IDLServer_resetOffset_helper::s_return_helper = {};

wholeBodyDynamics_IDLServer_resetOffset_helper::wholeBodyDynamics_IDLServer_resetOffset_helper(const std::string& calib_code) :
        m_calib_code{calib_code}
{
    s_return_helper = {};
}

bool wholeBodyDynamics_IDLServer_resetOffset_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    if (!writer.writeTag("resetOffset", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_calib_code)) {
        return false;
    }
    return true;
}

bool wholeBodyDynamics_IDLServer_resetOffset_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class wholeBodyDynamics_IDLServer_usePreEstimatedOffset_helper :
        public yarp::os::Portable
{
public:
    explicit wholeBodyDynamics_IDLServer_usePreEstimatedOffset_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static bool s_return_helper;
};

thread_local bool wholeBodyDynamics_IDLServer_usePreEstimatedOffset_helper::s_return_helper = {};

wholeBodyDynamics_IDLServer_usePreEstimatedOffset_helper::wholeBodyDynamics_IDLServer_usePreEstimatedOffset_helper()
{
    s_return_helper = {};
}

bool wholeBodyDynamics_IDLServer_usePreEstimatedOffset_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(1)) {
        return false;
    }
    if (!writer.writeTag("usePreEstimatedOffset", 1, 1)) {
        return false;
    }
    return true;
}

bool wholeBodyDynamics_IDLServer_usePreEstimatedOffset_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class wholeBodyDynamics_IDLServer_quit_helper :
        public yarp::os::Portable
{
public:
    explicit wholeBodyDynamics_IDLServer_quit_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static bool s_return_helper;
};

thread_local bool wholeBodyDynamics_IDLServer_quit_helper::s_return_helper = {};

wholeBodyDynamics_IDLServer_quit_helper::wholeBodyDynamics_IDLServer_quit_helper()
{
    s_return_helper = {};
}

bool wholeBodyDynamics_IDLServer_quit_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(1)) {
        return false;
    }
    if (!writer.writeTag("quit", 1, 1)) {
        return false;
    }
    return true;
}

bool wholeBodyDynamics_IDLServer_quit_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class wholeBodyDynamics_IDLServer_resetSimpleLeggedOdometry_helper :
        public yarp::os::Portable
{
public:
    explicit wholeBodyDynamics_IDLServer_resetSimpleLeggedOdometry_helper(const std::string& initial_world_frame, const std::string& initial_fixed_link);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_initial_world_frame;
    std::string m_initial_fixed_link;

    thread_local static bool s_return_helper;
};

thread_local bool wholeBodyDynamics_IDLServer_resetSimpleLeggedOdometry_helper::s_return_helper = {};

wholeBodyDynamics_IDLServer_resetSimpleLeggedOdometry_helper::wholeBodyDynamics_IDLServer_resetSimpleLeggedOdometry_helper(const std::string& initial_world_frame, const std::string& initial_fixed_link) :
        m_initial_world_frame{initial_world_frame},
        m_initial_fixed_link{initial_fixed_link}
{
    s_return_helper = {};
}

bool wholeBodyDynamics_IDLServer_resetSimpleLeggedOdometry_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(3)) {
        return false;
    }
    if (!writer.writeTag("resetSimpleLeggedOdometry", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_initial_world_frame)) {
        return false;
    }
    if (!writer.writeString(m_initial_fixed_link)) {
        return false;
    }
    return true;
}

bool wholeBodyDynamics_IDLServer_resetSimpleLeggedOdometry_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class wholeBodyDynamics_IDLServer_changeFixedLinkSimpleLeggedOdometry_helper :
        public yarp::os::Portable
{
public:
    explicit wholeBodyDynamics_IDLServer_changeFixedLinkSimpleLeggedOdometry_helper(const std::string& new_fixed_link);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_new_fixed_link;

    thread_local static bool s_return_helper;
};

thread_local bool wholeBodyDynamics_IDLServer_changeFixedLinkSimpleLeggedOdometry_helper::s_return_helper = {};

wholeBodyDynamics_IDLServer_changeFixedLinkSimpleLeggedOdometry_helper::wholeBodyDynamics_IDLServer_changeFixedLinkSimpleLeggedOdometry_helper(const std::string& new_fixed_link) :
        m_new_fixed_link{new_fixed_link}
{
    s_return_helper = {};
}

bool wholeBodyDynamics_IDLServer_changeFixedLinkSimpleLeggedOdometry_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    if (!writer.writeTag("changeFixedLinkSimpleLeggedOdometry", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_new_fixed_link)) {
        return false;
    }
    return true;
}

bool wholeBodyDynamics_IDLServer_changeFixedLinkSimpleLeggedOdometry_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class wholeBodyDynamics_IDLServer_set_imuFilterCutoffInHz_helper :
        public yarp::os::Portable
{
public:
    explicit wholeBodyDynamics_IDLServer_set_imuFilterCutoffInHz_helper(const double newCutoff);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    double m_newCutoff;

    thread_local static bool s_return_helper;
};

thread_local bool wholeBodyDynamics_IDLServer_set_imuFilterCutoffInHz_helper::s_return_helper = {};

wholeBodyDynamics_IDLServer_set_imuFilterCutoffInHz_helper::wholeBodyDynamics_IDLServer_set_imuFilterCutoffInHz_helper(const double newCutoff) :
        m_newCutoff{newCutoff}
{
    s_return_helper = {};
}

bool wholeBodyDynamics_IDLServer_set_imuFilterCutoffInHz_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(3)) {
        return false;
    }
    if (!writer.writeTag("set_imuFilterCutoffInHz", 1, 2)) {
        return false;
    }
    if (!writer.writeFloat64(m_newCutoff)) {
        return false;
    }
    return true;
}

bool wholeBodyDynamics_IDLServer_set_imuFilterCutoffInHz_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class wholeBodyDynamics_IDLServer_get_imuFilterCutoffInHz_helper :
        public yarp::os::Portable
{
public:
    explicit wholeBodyDynamics_IDLServer_get_imuFilterCutoffInHz_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static double s_return_helper;
};

thread_local double wholeBodyDynamics_IDLServer_get_imuFilterCutoffInHz_helper::s_return_helper = {};

wholeBodyDynamics_IDLServer_get_imuFilterCutoffInHz_helper::wholeBodyDynamics_IDLServer_get_imuFilterCutoffInHz_helper()
{
    s_return_helper = {};
}

bool wholeBodyDynamics_IDLServer_get_imuFilterCutoffInHz_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    if (!writer.writeTag("get_imuFilterCutoffInHz", 1, 2)) {
        return false;
    }
    return true;
}

bool wholeBodyDynamics_IDLServer_get_imuFilterCutoffInHz_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readFloat64(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class wholeBodyDynamics_IDLServer_set_forceTorqueFilterCutoffInHz_helper :
        public yarp::os::Portable
{
public:
    explicit wholeBodyDynamics_IDLServer_set_forceTorqueFilterCutoffInHz_helper(const double newCutoff);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    double m_newCutoff;

    thread_local static bool s_return_helper;
};

thread_local bool wholeBodyDynamics_IDLServer_set_forceTorqueFilterCutoffInHz_helper::s_return_helper = {};

wholeBodyDynamics_IDLServer_set_forceTorqueFilterCutoffInHz_helper::wholeBodyDynamics_IDLServer_set_forceTorqueFilterCutoffInHz_helper(const double newCutoff) :
        m_newCutoff{newCutoff}
{
    s_return_helper = {};
}

bool wholeBodyDynamics_IDLServer_set_forceTorqueFilterCutoffInHz_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(3)) {
        return false;
    }
    if (!writer.writeTag("set_forceTorqueFilterCutoffInHz", 1, 2)) {
        return false;
    }
    if (!writer.writeFloat64(m_newCutoff)) {
        return false;
    }
    return true;
}

bool wholeBodyDynamics_IDLServer_set_forceTorqueFilterCutoffInHz_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class wholeBodyDynamics_IDLServer_get_forceTorqueFilterCutoffInHz_helper :
        public yarp::os::Portable
{
public:
    explicit wholeBodyDynamics_IDLServer_get_forceTorqueFilterCutoffInHz_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static double s_return_helper;
};

thread_local double wholeBodyDynamics_IDLServer_get_forceTorqueFilterCutoffInHz_helper::s_return_helper = {};

wholeBodyDynamics_IDLServer_get_forceTorqueFilterCutoffInHz_helper::wholeBodyDynamics_IDLServer_get_forceTorqueFilterCutoffInHz_helper()
{
    s_return_helper = {};
}

bool wholeBodyDynamics_IDLServer_get_forceTorqueFilterCutoffInHz_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    if (!writer.writeTag("get_forceTorqueFilterCutoffInHz", 1, 2)) {
        return false;
    }
    return true;
}

bool wholeBodyDynamics_IDLServer_get_forceTorqueFilterCutoffInHz_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readFloat64(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class wholeBodyDynamics_IDLServer_set_jointVelFilterCutoffInHz_helper :
        public yarp::os::Portable
{
public:
    explicit wholeBodyDynamics_IDLServer_set_jointVelFilterCutoffInHz_helper(const double newCutoff);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    double m_newCutoff;

    thread_local static bool s_return_helper;
};

thread_local bool wholeBodyDynamics_IDLServer_set_jointVelFilterCutoffInHz_helper::s_return_helper = {};

wholeBodyDynamics_IDLServer_set_jointVelFilterCutoffInHz_helper::wholeBodyDynamics_IDLServer_set_jointVelFilterCutoffInHz_helper(const double newCutoff) :
        m_newCutoff{newCutoff}
{
    s_return_helper = {};
}

bool wholeBodyDynamics_IDLServer_set_jointVelFilterCutoffInHz_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(3)) {
        return false;
    }
    if (!writer.writeTag("set_jointVelFilterCutoffInHz", 1, 2)) {
        return false;
    }
    if (!writer.writeFloat64(m_newCutoff)) {
        return false;
    }
    return true;
}

bool wholeBodyDynamics_IDLServer_set_jointVelFilterCutoffInHz_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class wholeBodyDynamics_IDLServer_get_jointVelFilterCutoffInHz_helper :
        public yarp::os::Portable
{
public:
    explicit wholeBodyDynamics_IDLServer_get_jointVelFilterCutoffInHz_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static double s_return_helper;
};

thread_local double wholeBodyDynamics_IDLServer_get_jointVelFilterCutoffInHz_helper::s_return_helper = {};

wholeBodyDynamics_IDLServer_get_jointVelFilterCutoffInHz_helper::wholeBodyDynamics_IDLServer_get_jointVelFilterCutoffInHz_helper()
{
    s_return_helper = {};
}

bool wholeBodyDynamics_IDLServer_get_jointVelFilterCutoffInHz_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    if (!writer.writeTag("get_jointVelFilterCutoffInHz", 1, 2)) {
        return false;
    }
    return true;
}

bool wholeBodyDynamics_IDLServer_get_jointVelFilterCutoffInHz_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readFloat64(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class wholeBodyDynamics_IDLServer_set_jointAccFilterCutoffInHz_helper :
        public yarp::os::Portable
{
public:
    explicit wholeBodyDynamics_IDLServer_set_jointAccFilterCutoffInHz_helper(const double newCutoff);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    double m_newCutoff;

    thread_local static bool s_return_helper;
};

thread_local bool wholeBodyDynamics_IDLServer_set_jointAccFilterCutoffInHz_helper::s_return_helper = {};

wholeBodyDynamics_IDLServer_set_jointAccFilterCutoffInHz_helper::wholeBodyDynamics_IDLServer_set_jointAccFilterCutoffInHz_helper(const double newCutoff) :
        m_newCutoff{newCutoff}
{
    s_return_helper = {};
}

bool wholeBodyDynamics_IDLServer_set_jointAccFilterCutoffInHz_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(3)) {
        return false;
    }
    if (!writer.writeTag("set_jointAccFilterCutoffInHz", 1, 2)) {
        return false;
    }
    if (!writer.writeFloat64(m_newCutoff)) {
        return false;
    }
    return true;
}

bool wholeBodyDynamics_IDLServer_set_jointAccFilterCutoffInHz_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class wholeBodyDynamics_IDLServer_get_jointAccFilterCutoffInHz_helper :
        public yarp::os::Portable
{
public:
    explicit wholeBodyDynamics_IDLServer_get_jointAccFilterCutoffInHz_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static double s_return_helper;
};

thread_local double wholeBodyDynamics_IDLServer_get_jointAccFilterCutoffInHz_helper::s_return_helper = {};

wholeBodyDynamics_IDLServer_get_jointAccFilterCutoffInHz_helper::wholeBodyDynamics_IDLServer_get_jointAccFilterCutoffInHz_helper()
{
    s_return_helper = {};
}

bool wholeBodyDynamics_IDLServer_get_jointAccFilterCutoffInHz_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    if (!writer.writeTag("get_jointAccFilterCutoffInHz", 1, 2)) {
        return false;
    }
    return true;
}

bool wholeBodyDynamics_IDLServer_get_jointAccFilterCutoffInHz_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readFloat64(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class wholeBodyDynamics_IDLServer_useIMUAsKinematicSource_helper :
        public yarp::os::Portable
{
public:
    explicit wholeBodyDynamics_IDLServer_useIMUAsKinematicSource_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static bool s_return_helper;
};

thread_local bool wholeBodyDynamics_IDLServer_useIMUAsKinematicSource_helper::s_return_helper = {};

wholeBodyDynamics_IDLServer_useIMUAsKinematicSource_helper::wholeBodyDynamics_IDLServer_useIMUAsKinematicSource_helper()
{
    s_return_helper = {};
}

bool wholeBodyDynamics_IDLServer_useIMUAsKinematicSource_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(1)) {
        return false;
    }
    if (!writer.writeTag("useIMUAsKinematicSource", 1, 1)) {
        return false;
    }
    return true;
}

bool wholeBodyDynamics_IDLServer_useIMUAsKinematicSource_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class wholeBodyDynamics_IDLServer_useFixedFrameAsKinematicSource_helper :
        public yarp::os::Portable
{
public:
    explicit wholeBodyDynamics_IDLServer_useFixedFrameAsKinematicSource_helper(const std::string& fixedFrame);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_fixedFrame;

    thread_local static bool s_return_helper;
};

thread_local bool wholeBodyDynamics_IDLServer_useFixedFrameAsKinematicSource_helper::s_return_helper = {};

wholeBodyDynamics_IDLServer_useFixedFrameAsKinematicSource_helper::wholeBodyDynamics_IDLServer_useFixedFrameAsKinematicSource_helper(const std::string& fixedFrame) :
        m_fixedFrame{fixedFrame}
{
    s_return_helper = {};
}

bool wholeBodyDynamics_IDLServer_useFixedFrameAsKinematicSource_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    if (!writer.writeTag("useFixedFrameAsKinematicSource", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_fixedFrame)) {
        return false;
    }
    return true;
}

bool wholeBodyDynamics_IDLServer_useFixedFrameAsKinematicSource_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class wholeBodyDynamics_IDLServer_setUseOfJointVelocities_helper :
        public yarp::os::Portable
{
public:
    explicit wholeBodyDynamics_IDLServer_setUseOfJointVelocities_helper(const bool enable);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    bool m_enable;

    thread_local static bool s_return_helper;
};

thread_local bool wholeBodyDynamics_IDLServer_setUseOfJointVelocities_helper::s_return_helper = {};

wholeBodyDynamics_IDLServer_setUseOfJointVelocities_helper::wholeBodyDynamics_IDLServer_setUseOfJointVelocities_helper(const bool enable) :
        m_enable{enable}
{
    s_return_helper = {};
}

bool wholeBodyDynamics_IDLServer_setUseOfJointVelocities_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    if (!writer.writeTag("setUseOfJointVelocities", 1, 1)) {
        return false;
    }
    if (!writer.writeBool(m_enable)) {
        return false;
    }
    return true;
}

bool wholeBodyDynamics_IDLServer_setUseOfJointVelocities_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class wholeBodyDynamics_IDLServer_setUseOfJointAccelerations_helper :
        public yarp::os::Portable
{
public:
    explicit wholeBodyDynamics_IDLServer_setUseOfJointAccelerations_helper(const bool enable);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    bool m_enable;

    thread_local static bool s_return_helper;
};

thread_local bool wholeBodyDynamics_IDLServer_setUseOfJointAccelerations_helper::s_return_helper = {};

wholeBodyDynamics_IDLServer_setUseOfJointAccelerations_helper::wholeBodyDynamics_IDLServer_setUseOfJointAccelerations_helper(const bool enable) :
        m_enable{enable}
{
    s_return_helper = {};
}

bool wholeBodyDynamics_IDLServer_setUseOfJointAccelerations_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    if (!writer.writeTag("setUseOfJointAccelerations", 1, 1)) {
        return false;
    }
    if (!writer.writeBool(m_enable)) {
        return false;
    }
    return true;
}

bool wholeBodyDynamics_IDLServer_setUseOfJointAccelerations_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class wholeBodyDynamics_IDLServer_getCurrentSettingsString_helper :
        public yarp::os::Portable
{
public:
    explicit wholeBodyDynamics_IDLServer_getCurrentSettingsString_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static std::string s_return_helper;
};

thread_local std::string wholeBodyDynamics_IDLServer_getCurrentSettingsString_helper::s_return_helper = {};

wholeBodyDynamics_IDLServer_getCurrentSettingsString_helper::wholeBodyDynamics_IDLServer_getCurrentSettingsString_helper()
{
    s_return_helper = {};
}

bool wholeBodyDynamics_IDLServer_getCurrentSettingsString_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(1)) {
        return false;
    }
    if (!writer.writeTag("getCurrentSettingsString", 1, 1)) {
        return false;
    }
    return true;
}

bool wholeBodyDynamics_IDLServer_getCurrentSettingsString_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readString(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

// Constructor
wholeBodyDynamics_IDLServer::wholeBodyDynamics_IDLServer()
{
    yarp().setOwner(*this);
}

bool wholeBodyDynamics_IDLServer::calib(const std::string& calib_code, const std::int32_t nr_of_samples)
{
    wholeBodyDynamics_IDLServer_calib_helper helper{calib_code, nr_of_samples};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool wholeBodyDynamics_IDLServer::calib(const std::string& calib_code, const std::int32_t nr_of_samples)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? wholeBodyDynamics_IDLServer_calib_helper::s_return_helper : bool{};
}

bool wholeBodyDynamics_IDLServer::calibStanding(const std::string& calib_code, const std::int32_t nr_of_samples)
{
    wholeBodyDynamics_IDLServer_calibStanding_helper helper{calib_code, nr_of_samples};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool wholeBodyDynamics_IDLServer::calibStanding(const std::string& calib_code, const std::int32_t nr_of_samples)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? wholeBodyDynamics_IDLServer_calibStanding_helper::s_return_helper : bool{};
}

bool wholeBodyDynamics_IDLServer::calibStandingWithJetsiRonCubMk1(const std::string& calib_code, const std::int32_t nr_of_samples)
{
    wholeBodyDynamics_IDLServer_calibStandingWithJetsiRonCubMk1_helper helper{calib_code, nr_of_samples};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool wholeBodyDynamics_IDLServer::calibStandingWithJetsiRonCubMk1(const std::string& calib_code, const std::int32_t nr_of_samples)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? wholeBodyDynamics_IDLServer_calibStandingWithJetsiRonCubMk1_helper::s_return_helper : bool{};
}

bool wholeBodyDynamics_IDLServer::calibStandingLeftFoot(const std::string& calib_code, const std::int32_t nr_of_samples)
{
    wholeBodyDynamics_IDLServer_calibStandingLeftFoot_helper helper{calib_code, nr_of_samples};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool wholeBodyDynamics_IDLServer::calibStandingLeftFoot(const std::string& calib_code, const std::int32_t nr_of_samples)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? wholeBodyDynamics_IDLServer_calibStandingLeftFoot_helper::s_return_helper : bool{};
}

bool wholeBodyDynamics_IDLServer::calibStandingRightFoot(const std::string& calib_code, const std::int32_t nr_of_samples)
{
    wholeBodyDynamics_IDLServer_calibStandingRightFoot_helper helper{calib_code, nr_of_samples};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool wholeBodyDynamics_IDLServer::calibStandingRightFoot(const std::string& calib_code, const std::int32_t nr_of_samples)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? wholeBodyDynamics_IDLServer_calibStandingRightFoot_helper::s_return_helper : bool{};
}

bool wholeBodyDynamics_IDLServer::calibStandingOnOneLink(const std::string& standing_frame, const std::int32_t nr_of_samples)
{
    wholeBodyDynamics_IDLServer_calibStandingOnOneLink_helper helper{standing_frame, nr_of_samples};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool wholeBodyDynamics_IDLServer::calibStandingOnOneLink(const std::string& standing_frame, const std::int32_t nr_of_samples)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? wholeBodyDynamics_IDLServer_calibStandingOnOneLink_helper::s_return_helper : bool{};
}

bool wholeBodyDynamics_IDLServer::calibStandingOnTwoLinks(const std::string& first_standing_frame, const std::string& second_standing_frame, const std::int32_t nr_of_samples)
{
    wholeBodyDynamics_IDLServer_calibStandingOnTwoLinks_helper helper{first_standing_frame, second_standing_frame, nr_of_samples};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool wholeBodyDynamics_IDLServer::calibStandingOnTwoLinks(const std::string& first_standing_frame, const std::string& second_standing_frame, const std::int32_t nr_of_samples)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? wholeBodyDynamics_IDLServer_calibStandingOnTwoLinks_helper::s_return_helper : bool{};
}

bool wholeBodyDynamics_IDLServer::resetOffset(const std::string& calib_code)
{
    wholeBodyDynamics_IDLServer_resetOffset_helper helper{calib_code};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool wholeBodyDynamics_IDLServer::resetOffset(const std::string& calib_code)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? wholeBodyDynamics_IDLServer_resetOffset_helper::s_return_helper : bool{};
}

bool wholeBodyDynamics_IDLServer::usePreEstimatedOffset()
{
    wholeBodyDynamics_IDLServer_usePreEstimatedOffset_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool wholeBodyDynamics_IDLServer::usePreEstimatedOffset()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? wholeBodyDynamics_IDLServer_usePreEstimatedOffset_helper::s_return_helper : bool{};
}

bool wholeBodyDynamics_IDLServer::quit()
{
    wholeBodyDynamics_IDLServer_quit_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool wholeBodyDynamics_IDLServer::quit()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? wholeBodyDynamics_IDLServer_quit_helper::s_return_helper : bool{};
}

bool wholeBodyDynamics_IDLServer::resetSimpleLeggedOdometry(const std::string& initial_world_frame, const std::string& initial_fixed_link)
{
    wholeBodyDynamics_IDLServer_resetSimpleLeggedOdometry_helper helper{initial_world_frame, initial_fixed_link};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool wholeBodyDynamics_IDLServer::resetSimpleLeggedOdometry(const std::string& initial_world_frame, const std::string& initial_fixed_link)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? wholeBodyDynamics_IDLServer_resetSimpleLeggedOdometry_helper::s_return_helper : bool{};
}

bool wholeBodyDynamics_IDLServer::changeFixedLinkSimpleLeggedOdometry(const std::string& new_fixed_link)
{
    wholeBodyDynamics_IDLServer_changeFixedLinkSimpleLeggedOdometry_helper helper{new_fixed_link};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool wholeBodyDynamics_IDLServer::changeFixedLinkSimpleLeggedOdometry(const std::string& new_fixed_link)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? wholeBodyDynamics_IDLServer_changeFixedLinkSimpleLeggedOdometry_helper::s_return_helper : bool{};
}

bool wholeBodyDynamics_IDLServer::set_imuFilterCutoffInHz(const double newCutoff)
{
    wholeBodyDynamics_IDLServer_set_imuFilterCutoffInHz_helper helper{newCutoff};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool wholeBodyDynamics_IDLServer::set_imuFilterCutoffInHz(const double newCutoff)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? wholeBodyDynamics_IDLServer_set_imuFilterCutoffInHz_helper::s_return_helper : bool{};
}

double wholeBodyDynamics_IDLServer::get_imuFilterCutoffInHz()
{
    wholeBodyDynamics_IDLServer_get_imuFilterCutoffInHz_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "double wholeBodyDynamics_IDLServer::get_imuFilterCutoffInHz()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? wholeBodyDynamics_IDLServer_get_imuFilterCutoffInHz_helper::s_return_helper : double{};
}

bool wholeBodyDynamics_IDLServer::set_forceTorqueFilterCutoffInHz(const double newCutoff)
{
    wholeBodyDynamics_IDLServer_set_forceTorqueFilterCutoffInHz_helper helper{newCutoff};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool wholeBodyDynamics_IDLServer::set_forceTorqueFilterCutoffInHz(const double newCutoff)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? wholeBodyDynamics_IDLServer_set_forceTorqueFilterCutoffInHz_helper::s_return_helper : bool{};
}

double wholeBodyDynamics_IDLServer::get_forceTorqueFilterCutoffInHz()
{
    wholeBodyDynamics_IDLServer_get_forceTorqueFilterCutoffInHz_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "double wholeBodyDynamics_IDLServer::get_forceTorqueFilterCutoffInHz()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? wholeBodyDynamics_IDLServer_get_forceTorqueFilterCutoffInHz_helper::s_return_helper : double{};
}

bool wholeBodyDynamics_IDLServer::set_jointVelFilterCutoffInHz(const double newCutoff)
{
    wholeBodyDynamics_IDLServer_set_jointVelFilterCutoffInHz_helper helper{newCutoff};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool wholeBodyDynamics_IDLServer::set_jointVelFilterCutoffInHz(const double newCutoff)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? wholeBodyDynamics_IDLServer_set_jointVelFilterCutoffInHz_helper::s_return_helper : bool{};
}

double wholeBodyDynamics_IDLServer::get_jointVelFilterCutoffInHz()
{
    wholeBodyDynamics_IDLServer_get_jointVelFilterCutoffInHz_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "double wholeBodyDynamics_IDLServer::get_jointVelFilterCutoffInHz()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? wholeBodyDynamics_IDLServer_get_jointVelFilterCutoffInHz_helper::s_return_helper : double{};
}

bool wholeBodyDynamics_IDLServer::set_jointAccFilterCutoffInHz(const double newCutoff)
{
    wholeBodyDynamics_IDLServer_set_jointAccFilterCutoffInHz_helper helper{newCutoff};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool wholeBodyDynamics_IDLServer::set_jointAccFilterCutoffInHz(const double newCutoff)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? wholeBodyDynamics_IDLServer_set_jointAccFilterCutoffInHz_helper::s_return_helper : bool{};
}

double wholeBodyDynamics_IDLServer::get_jointAccFilterCutoffInHz()
{
    wholeBodyDynamics_IDLServer_get_jointAccFilterCutoffInHz_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "double wholeBodyDynamics_IDLServer::get_jointAccFilterCutoffInHz()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? wholeBodyDynamics_IDLServer_get_jointAccFilterCutoffInHz_helper::s_return_helper : double{};
}

bool wholeBodyDynamics_IDLServer::useIMUAsKinematicSource()
{
    wholeBodyDynamics_IDLServer_useIMUAsKinematicSource_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool wholeBodyDynamics_IDLServer::useIMUAsKinematicSource()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? wholeBodyDynamics_IDLServer_useIMUAsKinematicSource_helper::s_return_helper : bool{};
}

bool wholeBodyDynamics_IDLServer::useFixedFrameAsKinematicSource(const std::string& fixedFrame)
{
    wholeBodyDynamics_IDLServer_useFixedFrameAsKinematicSource_helper helper{fixedFrame};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool wholeBodyDynamics_IDLServer::useFixedFrameAsKinematicSource(const std::string& fixedFrame)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? wholeBodyDynamics_IDLServer_useFixedFrameAsKinematicSource_helper::s_return_helper : bool{};
}

bool wholeBodyDynamics_IDLServer::setUseOfJointVelocities(const bool enable)
{
    wholeBodyDynamics_IDLServer_setUseOfJointVelocities_helper helper{enable};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool wholeBodyDynamics_IDLServer::setUseOfJointVelocities(const bool enable)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? wholeBodyDynamics_IDLServer_setUseOfJointVelocities_helper::s_return_helper : bool{};
}

bool wholeBodyDynamics_IDLServer::setUseOfJointAccelerations(const bool enable)
{
    wholeBodyDynamics_IDLServer_setUseOfJointAccelerations_helper helper{enable};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool wholeBodyDynamics_IDLServer::setUseOfJointAccelerations(const bool enable)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? wholeBodyDynamics_IDLServer_setUseOfJointAccelerations_helper::s_return_helper : bool{};
}

std::string wholeBodyDynamics_IDLServer::getCurrentSettingsString()
{
    wholeBodyDynamics_IDLServer_getCurrentSettingsString_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "std::string wholeBodyDynamics_IDLServer::getCurrentSettingsString()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? wholeBodyDynamics_IDLServer_getCurrentSettingsString_helper::s_return_helper : std::string{};
}

// help method
std::vector<std::string> wholeBodyDynamics_IDLServer::help(const std::string& functionName)
{
    bool showAll = (functionName == "--all");
    std::vector<std::string> helpString;
    if (showAll) {
        helpString.emplace_back("*** Available commands:");
        helpString.emplace_back("calib");
        helpString.emplace_back("calibStanding");
        helpString.emplace_back("calibStandingWithJetsiRonCubMk1");
        helpString.emplace_back("calibStandingLeftFoot");
        helpString.emplace_back("calibStandingRightFoot");
        helpString.emplace_back("calibStandingOnOneLink");
        helpString.emplace_back("calibStandingOnTwoLinks");
        helpString.emplace_back("resetOffset");
        helpString.emplace_back("usePreEstimatedOffset");
        helpString.emplace_back("quit");
        helpString.emplace_back("resetSimpleLeggedOdometry");
        helpString.emplace_back("changeFixedLinkSimpleLeggedOdometry");
        helpString.emplace_back("set_imuFilterCutoffInHz");
        helpString.emplace_back("get_imuFilterCutoffInHz");
        helpString.emplace_back("set_forceTorqueFilterCutoffInHz");
        helpString.emplace_back("get_forceTorqueFilterCutoffInHz");
        helpString.emplace_back("set_jointVelFilterCutoffInHz");
        helpString.emplace_back("get_jointVelFilterCutoffInHz");
        helpString.emplace_back("set_jointAccFilterCutoffInHz");
        helpString.emplace_back("get_jointAccFilterCutoffInHz");
        helpString.emplace_back("useIMUAsKinematicSource");
        helpString.emplace_back("useFixedFrameAsKinematicSource");
        helpString.emplace_back("setUseOfJointVelocities");
        helpString.emplace_back("setUseOfJointAccelerations");
        helpString.emplace_back("getCurrentSettingsString");
        helpString.emplace_back("help");
    } else {
        if (functionName == "calib") {
            helpString.emplace_back("bool calib(const std::string& calib_code, const std::int32_t nr_of_samples = 100) ");
            helpString.emplace_back("Calibrate the force/torque sensors ");
            helpString.emplace_back("(WARNING: calibrate the sensors when the only external forces acting on the robot are on the torso/waist) ");
            helpString.emplace_back("@param calib_code argument to specify the sensors to calibrate (all,arms,legs,feet) ");
            helpString.emplace_back("@param nr_of_samples number of samples ");
            helpString.emplace_back("@return true/false on success/failure ");
        }
        if (functionName == "calibStanding") {
            helpString.emplace_back("bool calibStanding(const std::string& calib_code, const std::int32_t nr_of_samples = 100) ");
            helpString.emplace_back("Calibrate the force/torque sensors when on double support ");
            helpString.emplace_back("(WARNING: calibrate the sensors when the only external forces acting on the robot are on the sole). ");
            helpString.emplace_back("For this calibration the strong assumption of symmetry of the robot and its pose is done. ");
            helpString.emplace_back("@param calib_code argument to specify the sensors to calibrate (all,arms,legs,feet) ");
            helpString.emplace_back("@param nr_of_samples number of samples ");
            helpString.emplace_back("@return true/false on success/failure ");
        }
        if (functionName == "calibStandingWithJetsiRonCubMk1") {
            helpString.emplace_back("bool calibStandingWithJetsiRonCubMk1(const std::string& calib_code, const std::int32_t nr_of_samples = 100) ");
            helpString.emplace_back("Calibrate the force/torque sensors when on double support and with jet engines turned ON and on idle thrust ");
            helpString.emplace_back("(WARNING: works only with iRonCub-Mk1). ");
            helpString.emplace_back("(WARNING: calibrate the sensors when the only external forces acting on the robot are on the sole). ");
            helpString.emplace_back("For this calibration the strong assumption of symmetry of the robot and its pose is done. Also, only pure forces are ");
            helpString.emplace_back("assumed to be acting on the soles ");
            helpString.emplace_back("@param calib_code argument to specify the sensors to calibrate (all,arms,legs,feet) ");
            helpString.emplace_back("@param nr_of_samples number of samples ");
            helpString.emplace_back("@return true/false on success/failure ");
        }
        if (functionName == "calibStandingLeftFoot") {
            helpString.emplace_back("bool calibStandingLeftFoot(const std::string& calib_code, const std::int32_t nr_of_samples = 100) ");
            helpString.emplace_back("Calibrate the force/torque sensors when on single support on left foot ");
            helpString.emplace_back("(WARNING: calibrate the sensors when the only external forces acting on the robot are on the left sole). ");
            helpString.emplace_back("@param calib_code argument to specify the sensors to calibrate (all,arms,legs,feet) ");
            helpString.emplace_back("@param nr_of_samples number of samples ");
            helpString.emplace_back("@return true/false on success/failure ");
        }
        if (functionName == "calibStandingRightFoot") {
            helpString.emplace_back("bool calibStandingRightFoot(const std::string& calib_code, const std::int32_t nr_of_samples = 100) ");
            helpString.emplace_back("Calibrate the force/torque sensors when on single support on right foot ");
            helpString.emplace_back("(WARNING: calibrate the sensors when the only external forces acting on the robot are on the right sole). ");
            helpString.emplace_back("@param calib_code argument to specify the sensors to calibrate (all,arms,legs,feet) ");
            helpString.emplace_back("@param nr_of_samples number of samples ");
            helpString.emplace_back("@return true/false on success/failure ");
        }
        if (functionName == "calibStandingOnOneLink") {
            helpString.emplace_back("bool calibStandingOnOneLink(const std::string& standing_frame, const std::int32_t nr_of_samples = 100) ");
            helpString.emplace_back("Calibrate the force/torque sensors offsets when the external forces are acting on only one link. ");
            helpString.emplace_back("This method is typically used when the robot is standing on only one feet, ");
            helpString.emplace_back("or when it is attached to a fixture that is acting on a single link (typically the chest or the waist). ");
            helpString.emplace_back("@note This method calibrates the offsets of all the force-torque sensors. ");
            helpString.emplace_back("@param standing_frame a frame belonging to the link on which it is assumed that external forces are acting. ");
            helpString.emplace_back("@param nr_of_samples number of samples to use for calibration. ");
            helpString.emplace_back("@return true/false on success/failure. ");
        }
        if (functionName == "calibStandingOnTwoLinks") {
            helpString.emplace_back("bool calibStandingOnTwoLinks(const std::string& first_standing_frame, const std::string& second_standing_frame, const std::int32_t nr_of_samples = 100) ");
            helpString.emplace_back("Calibrate the force/torque sensors offsets when the external forces are acting on only two links. ");
            helpString.emplace_back("This method is not in general guaranteed to work, and it works in practice only when the robot and its internal ");
            helpString.emplace_back("forces are symmetric w.r.t. the two contact links. Note that the value obtaiend from this calibration depend ");
            helpString.emplace_back("on the location of the origin of the specific frames of the contact links used for the calibration. ");
            helpString.emplace_back("@note This method calibrates the offsets of all the force-torque sensors. ");
            helpString.emplace_back("@param first_standing_frame a frame belonging to one of the two links on which it is assumed that tue external forces are acting. ");
            helpString.emplace_back("@param second_standing_frame a frame belonging to the other link on which it is assumed that tue external forces are acting. ");
            helpString.emplace_back("@param nr_of_samples number of samples ");
            helpString.emplace_back("@return true/false on success/failure ");
        }
        if (functionName == "resetOffset") {
            helpString.emplace_back("bool resetOffset(const std::string& calib_code) ");
            helpString.emplace_back("Reset the sensor offset to 0 0 0 0 0 0 (six zeros). ");
            helpString.emplace_back("@param calib_code argument to specify the sensors to reset (all,arms,legs,feet) ");
            helpString.emplace_back("@return true/false on success/failure ");
        }
        if (functionName == "usePreEstimatedOffset") {
            helpString.emplace_back("bool usePreEstimatedOffset() ");
            helpString.emplace_back("Use the offline estimated offset of the sensor. ");
            helpString.emplace_back("Only sensors with a specified offset in configuration file are affected by this method.s ");
            helpString.emplace_back("@return true/false on success/failure ");
        }
        if (functionName == "quit") {
            helpString.emplace_back("bool quit() ");
            helpString.emplace_back("Quit the module. ");
            helpString.emplace_back("@return true/false on success/failure ");
        }
        if (functionName == "resetSimpleLeggedOdometry") {
            helpString.emplace_back("bool resetSimpleLeggedOdometry(const std::string& initial_world_frame, const std::string& initial_fixed_link) ");
            helpString.emplace_back("Reset the odometry world to be (initially) a frame specified in the robot model, ");
            helpString.emplace_back("and specify a link that is assumed to be fixed in the odometry. ");
            helpString.emplace_back("@param initial_world_frame the frame of the robot model that is assume to be initially ");
            helpString.emplace_back("       coincident with the world/inertial frame. ");
            helpString.emplace_back("@param new_fixed_link the name of the link that should be initially fixed ");
            helpString.emplace_back("@return true/false on success/failure (typically if the frame/link names are wrong) ");
        }
        if (functionName == "changeFixedLinkSimpleLeggedOdometry") {
            helpString.emplace_back("bool changeFixedLinkSimpleLeggedOdometry(const std::string& new_fixed_link) ");
            helpString.emplace_back("Change the link that is considered fixed by the odometry. ");
            helpString.emplace_back("@param new_fixed_link the name of the new link that should be considered fixed ");
            helpString.emplace_back("@return true/false on success/failure (typically if the frame/link names are wrong) ");
        }
        if (functionName == "set_imuFilterCutoffInHz") {
            helpString.emplace_back("bool set_imuFilterCutoffInHz(const double newCutoff) ");
            helpString.emplace_back("Set the cutoff frequency (in Hz) for IMU measurements ");
            helpString.emplace_back("@return true/false on success/failure ");
        }
        if (functionName == "get_imuFilterCutoffInHz") {
            helpString.emplace_back("double get_imuFilterCutoffInHz() ");
            helpString.emplace_back("Get the cutoff frequency (in Hz) for IMU measurements ");
            helpString.emplace_back("@return the cutoff frequency (in Hz) ");
        }
        if (functionName == "set_forceTorqueFilterCutoffInHz") {
            helpString.emplace_back("bool set_forceTorqueFilterCutoffInHz(const double newCutoff) ");
            helpString.emplace_back("Set the cutoff frequency (in Hz) for FT measurements ");
            helpString.emplace_back("@return true/false on success/failure ");
        }
        if (functionName == "get_forceTorqueFilterCutoffInHz") {
            helpString.emplace_back("double get_forceTorqueFilterCutoffInHz() ");
            helpString.emplace_back("Get the cutoff frequency (in Hz) for FT measurements ");
            helpString.emplace_back("@return the cutoff frequency (in Hz) ");
        }
        if (functionName == "set_jointVelFilterCutoffInHz") {
            helpString.emplace_back("bool set_jointVelFilterCutoffInHz(const double newCutoff) ");
            helpString.emplace_back("Set the cutoff frequency (in Hz) for joint velocities measurements ");
            helpString.emplace_back("@return true/false on success/failure ");
        }
        if (functionName == "get_jointVelFilterCutoffInHz") {
            helpString.emplace_back("double get_jointVelFilterCutoffInHz() ");
            helpString.emplace_back("Get the cutoff frequency (in Hz) for joint velocities measurements ");
            helpString.emplace_back("@return the cutoff frequency (in Hz) ");
        }
        if (functionName == "set_jointAccFilterCutoffInHz") {
            helpString.emplace_back("bool set_jointAccFilterCutoffInHz(const double newCutoff) ");
            helpString.emplace_back("Set the cutoff frequency (in Hz) for joint acceleration measurements ");
            helpString.emplace_back("@return true/false on success/failure ");
        }
        if (functionName == "get_jointAccFilterCutoffInHz") {
            helpString.emplace_back("double get_jointAccFilterCutoffInHz() ");
            helpString.emplace_back("Get the cutoff frequency (in Hz) for joint acceleration measurements ");
            helpString.emplace_back("@return the cutoff frequency (in Hz) ");
        }
        if (functionName == "useIMUAsKinematicSource") {
            helpString.emplace_back("bool useIMUAsKinematicSource() ");
            helpString.emplace_back("Use the IMU as the kinematic source of ");
            helpString.emplace_back("information for the acceleration of one link. ");
        }
        if (functionName == "useFixedFrameAsKinematicSource") {
            helpString.emplace_back("bool useFixedFrameAsKinematicSource(const std::string& fixedFrame) ");
            helpString.emplace_back("Use a fixed frame (tipically root_link, l_sole or r_sole) ");
            helpString.emplace_back("as the source of kinematic information. The assumption ");
            helpString.emplace_back("is that the specified frame will remain fixed until ");
            helpString.emplace_back("the kinematic source is changing, and the gravity ");
            helpString.emplace_back("on this link is specified by the fixedFrameGravity (tipically ");
            helpString.emplace_back("set to (0,0,-9.81) . ");
        }
        if (functionName == "setUseOfJointVelocities") {
            helpString.emplace_back("bool setUseOfJointVelocities(const bool enable) ");
            helpString.emplace_back("Set if to use or not the joint velocities in estimation. ");
        }
        if (functionName == "setUseOfJointAccelerations") {
            helpString.emplace_back("bool setUseOfJointAccelerations(const bool enable) ");
            helpString.emplace_back("Set if to use or not the joint velocities in estimation. ");
        }
        if (functionName == "getCurrentSettingsString") {
            helpString.emplace_back("std::string getCurrentSettingsString() ");
            helpString.emplace_back("Get the current settings in the form of a string. ");
            helpString.emplace_back("@return the current settings as a human readable string. ");
        }
        if (functionName == "help") {
            helpString.emplace_back("std::vector<std::string> help(const std::string& functionName = \"--all\")");
            helpString.emplace_back("Return list of available commands, or help message for a specific function");
            helpString.emplace_back("@param functionName name of command for which to get a detailed description. If none or '--all' is provided, print list of available commands");
            helpString.emplace_back("@return list of strings (one string per line)");
        }
    }
    if (helpString.empty()) {
        helpString.emplace_back("Command not found");
    }
    return helpString;
}

// read from ConnectionReader
bool wholeBodyDynamics_IDLServer::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    reader.expectAccept();
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }

    std::string tag = reader.readTag();
    bool direct = (tag == "__direct__");
    if (direct) {
        tag = reader.readTag();
    }
    while (!reader.isError()) {
        if (tag == "calib") {
            std::string calib_code;
            std::int32_t nr_of_samples;
            if (!reader.readString(calib_code)) {
                reader.fail();
                return false;
            }
            if (!reader.readI32(nr_of_samples)) {
                nr_of_samples = 100;
            }
            wholeBodyDynamics_IDLServer_calib_helper::s_return_helper = calib(calib_code, nr_of_samples);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(wholeBodyDynamics_IDLServer_calib_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "calibStanding") {
            std::string calib_code;
            std::int32_t nr_of_samples;
            if (!reader.readString(calib_code)) {
                reader.fail();
                return false;
            }
            if (!reader.readI32(nr_of_samples)) {
                nr_of_samples = 100;
            }
            wholeBodyDynamics_IDLServer_calibStanding_helper::s_return_helper = calibStanding(calib_code, nr_of_samples);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(wholeBodyDynamics_IDLServer_calibStanding_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "calibStandingWithJetsiRonCubMk1") {
            std::string calib_code;
            std::int32_t nr_of_samples;
            if (!reader.readString(calib_code)) {
                reader.fail();
                return false;
            }
            if (!reader.readI32(nr_of_samples)) {
                nr_of_samples = 100;
            }
            wholeBodyDynamics_IDLServer_calibStandingWithJetsiRonCubMk1_helper::s_return_helper = calibStandingWithJetsiRonCubMk1(calib_code, nr_of_samples);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(wholeBodyDynamics_IDLServer_calibStandingWithJetsiRonCubMk1_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "calibStandingLeftFoot") {
            std::string calib_code;
            std::int32_t nr_of_samples;
            if (!reader.readString(calib_code)) {
                reader.fail();
                return false;
            }
            if (!reader.readI32(nr_of_samples)) {
                nr_of_samples = 100;
            }
            wholeBodyDynamics_IDLServer_calibStandingLeftFoot_helper::s_return_helper = calibStandingLeftFoot(calib_code, nr_of_samples);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(wholeBodyDynamics_IDLServer_calibStandingLeftFoot_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "calibStandingRightFoot") {
            std::string calib_code;
            std::int32_t nr_of_samples;
            if (!reader.readString(calib_code)) {
                reader.fail();
                return false;
            }
            if (!reader.readI32(nr_of_samples)) {
                nr_of_samples = 100;
            }
            wholeBodyDynamics_IDLServer_calibStandingRightFoot_helper::s_return_helper = calibStandingRightFoot(calib_code, nr_of_samples);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(wholeBodyDynamics_IDLServer_calibStandingRightFoot_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "calibStandingOnOneLink") {
            std::string standing_frame;
            std::int32_t nr_of_samples;
            if (!reader.readString(standing_frame)) {
                reader.fail();
                return false;
            }
            if (!reader.readI32(nr_of_samples)) {
                nr_of_samples = 100;
            }
            wholeBodyDynamics_IDLServer_calibStandingOnOneLink_helper::s_return_helper = calibStandingOnOneLink(standing_frame, nr_of_samples);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(wholeBodyDynamics_IDLServer_calibStandingOnOneLink_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "calibStandingOnTwoLinks") {
            std::string first_standing_frame;
            std::string second_standing_frame;
            std::int32_t nr_of_samples;
            if (!reader.readString(first_standing_frame)) {
                reader.fail();
                return false;
            }
            if (!reader.readString(second_standing_frame)) {
                reader.fail();
                return false;
            }
            if (!reader.readI32(nr_of_samples)) {
                nr_of_samples = 100;
            }
            wholeBodyDynamics_IDLServer_calibStandingOnTwoLinks_helper::s_return_helper = calibStandingOnTwoLinks(first_standing_frame, second_standing_frame, nr_of_samples);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(wholeBodyDynamics_IDLServer_calibStandingOnTwoLinks_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "resetOffset") {
            std::string calib_code;
            if (!reader.readString(calib_code)) {
                reader.fail();
                return false;
            }
            wholeBodyDynamics_IDLServer_resetOffset_helper::s_return_helper = resetOffset(calib_code);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(wholeBodyDynamics_IDLServer_resetOffset_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "usePreEstimatedOffset") {
            wholeBodyDynamics_IDLServer_usePreEstimatedOffset_helper::s_return_helper = usePreEstimatedOffset();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(wholeBodyDynamics_IDLServer_usePreEstimatedOffset_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "quit") {
            wholeBodyDynamics_IDLServer_quit_helper::s_return_helper = quit();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(wholeBodyDynamics_IDLServer_quit_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "resetSimpleLeggedOdometry") {
            std::string initial_world_frame;
            std::string initial_fixed_link;
            if (!reader.readString(initial_world_frame)) {
                reader.fail();
                return false;
            }
            if (!reader.readString(initial_fixed_link)) {
                reader.fail();
                return false;
            }
            wholeBodyDynamics_IDLServer_resetSimpleLeggedOdometry_helper::s_return_helper = resetSimpleLeggedOdometry(initial_world_frame, initial_fixed_link);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(wholeBodyDynamics_IDLServer_resetSimpleLeggedOdometry_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "changeFixedLinkSimpleLeggedOdometry") {
            std::string new_fixed_link;
            if (!reader.readString(new_fixed_link)) {
                reader.fail();
                return false;
            }
            wholeBodyDynamics_IDLServer_changeFixedLinkSimpleLeggedOdometry_helper::s_return_helper = changeFixedLinkSimpleLeggedOdometry(new_fixed_link);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(wholeBodyDynamics_IDLServer_changeFixedLinkSimpleLeggedOdometry_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "set_imuFilterCutoffInHz") {
            double newCutoff;
            if (!reader.readFloat64(newCutoff)) {
                reader.fail();
                return false;
            }
            wholeBodyDynamics_IDLServer_set_imuFilterCutoffInHz_helper::s_return_helper = set_imuFilterCutoffInHz(newCutoff);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(wholeBodyDynamics_IDLServer_set_imuFilterCutoffInHz_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "get_imuFilterCutoffInHz") {
            wholeBodyDynamics_IDLServer_get_imuFilterCutoffInHz_helper::s_return_helper = get_imuFilterCutoffInHz();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeFloat64(wholeBodyDynamics_IDLServer_get_imuFilterCutoffInHz_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "set_forceTorqueFilterCutoffInHz") {
            double newCutoff;
            if (!reader.readFloat64(newCutoff)) {
                reader.fail();
                return false;
            }
            wholeBodyDynamics_IDLServer_set_forceTorqueFilterCutoffInHz_helper::s_return_helper = set_forceTorqueFilterCutoffInHz(newCutoff);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(wholeBodyDynamics_IDLServer_set_forceTorqueFilterCutoffInHz_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "get_forceTorqueFilterCutoffInHz") {
            wholeBodyDynamics_IDLServer_get_forceTorqueFilterCutoffInHz_helper::s_return_helper = get_forceTorqueFilterCutoffInHz();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeFloat64(wholeBodyDynamics_IDLServer_get_forceTorqueFilterCutoffInHz_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "set_jointVelFilterCutoffInHz") {
            double newCutoff;
            if (!reader.readFloat64(newCutoff)) {
                reader.fail();
                return false;
            }
            wholeBodyDynamics_IDLServer_set_jointVelFilterCutoffInHz_helper::s_return_helper = set_jointVelFilterCutoffInHz(newCutoff);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(wholeBodyDynamics_IDLServer_set_jointVelFilterCutoffInHz_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "get_jointVelFilterCutoffInHz") {
            wholeBodyDynamics_IDLServer_get_jointVelFilterCutoffInHz_helper::s_return_helper = get_jointVelFilterCutoffInHz();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeFloat64(wholeBodyDynamics_IDLServer_get_jointVelFilterCutoffInHz_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "set_jointAccFilterCutoffInHz") {
            double newCutoff;
            if (!reader.readFloat64(newCutoff)) {
                reader.fail();
                return false;
            }
            wholeBodyDynamics_IDLServer_set_jointAccFilterCutoffInHz_helper::s_return_helper = set_jointAccFilterCutoffInHz(newCutoff);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(wholeBodyDynamics_IDLServer_set_jointAccFilterCutoffInHz_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "get_jointAccFilterCutoffInHz") {
            wholeBodyDynamics_IDLServer_get_jointAccFilterCutoffInHz_helper::s_return_helper = get_jointAccFilterCutoffInHz();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeFloat64(wholeBodyDynamics_IDLServer_get_jointAccFilterCutoffInHz_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "useIMUAsKinematicSource") {
            wholeBodyDynamics_IDLServer_useIMUAsKinematicSource_helper::s_return_helper = useIMUAsKinematicSource();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(wholeBodyDynamics_IDLServer_useIMUAsKinematicSource_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "useFixedFrameAsKinematicSource") {
            std::string fixedFrame;
            if (!reader.readString(fixedFrame)) {
                reader.fail();
                return false;
            }
            wholeBodyDynamics_IDLServer_useFixedFrameAsKinematicSource_helper::s_return_helper = useFixedFrameAsKinematicSource(fixedFrame);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(wholeBodyDynamics_IDLServer_useFixedFrameAsKinematicSource_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "setUseOfJointVelocities") {
            bool enable;
            if (!reader.readBool(enable)) {
                reader.fail();
                return false;
            }
            wholeBodyDynamics_IDLServer_setUseOfJointVelocities_helper::s_return_helper = setUseOfJointVelocities(enable);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(wholeBodyDynamics_IDLServer_setUseOfJointVelocities_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "setUseOfJointAccelerations") {
            bool enable;
            if (!reader.readBool(enable)) {
                reader.fail();
                return false;
            }
            wholeBodyDynamics_IDLServer_setUseOfJointAccelerations_helper::s_return_helper = setUseOfJointAccelerations(enable);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(wholeBodyDynamics_IDLServer_setUseOfJointAccelerations_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "getCurrentSettingsString") {
            wholeBodyDynamics_IDLServer_getCurrentSettingsString_helper::s_return_helper = getCurrentSettingsString();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeString(wholeBodyDynamics_IDLServer_getCurrentSettingsString_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "help") {
            std::string functionName;
            if (!reader.readString(functionName)) {
                functionName = "--all";
            }
            auto help_strings = help(functionName);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.writeTag("many", 1, 0)) {
                    return false;
                }
                if (!writer.writeListBegin(BOTTLE_TAG_INT32, static_cast<uint32_t>(help_strings.size()))) {
                    return false;
                }
                for (const auto& help_string : help_strings) {
                    if (!writer.writeString(help_string)) {
                        return false;
                    }
                }
                if (!writer.writeListEnd()) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        std::string next_tag = reader.readTag();
        if (next_tag == "") {
            break;
        }
        tag.append("_").append(next_tag);
    }
    return false;
}
